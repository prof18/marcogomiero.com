<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin Multiplatform on Marco Gomiero</title><link>https://www.marcogomiero.com/tags/kotlin-multiplatform/</link><description>Recent content in Kotlin Multiplatform on Marco Gomiero</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 02 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.marcogomiero.com/tags/kotlin-multiplatform/index.xml" rel="self" type="application/rss+xml"/><item><title>Introducing KMP FatFramework Cocoa, a Gradle plugin for iOS FatFramework</title><link>https://www.marcogomiero.com/posts/2021/kmp-fatframework-cocoa-release/</link><pubDate>Tue, 02 Mar 2021 00:00:00 +0000</pubDate><guid>https://www.marcogomiero.com/posts/2021/kmp-fatframework-cocoa-release/</guid><description>Today I want to share KMP FatFramework Cocoa, a Gradle plugin for Kotlin Multiplatform projects that generate a FatFramework for iOS targets and manages the publishing process in a CocoaPod Repository.
The plugin is born from a set of unbundled Gradle tasks that I wrote to manage the building and the publishing process of Kotlin Multiplatform libraries for iOS that we use at Uniwhere. The libraries are published in a FatFramework that contains the code for every required architecture (real devices use the Arm64 architecture, while the simulator uses the host computer architecture which in most of the cases is X64).</description></item><item><title>Introducing Kotlin Multiplatform in an existing project</title><link>https://www.marcogomiero.com/posts/2021/kmp-existing-project/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://www.marcogomiero.com/posts/2021/kmp-existing-project/</guid><description>After discovering a new interesting technology or framework, you will probably start asking yourself how to integrate it into an existing project. That’s because, the possibility to start with a blank canvas is rare (not impossible, but rare).
This is also the case for Kotlin Multiplatform (I’ll call it KMP in the rest of the article).
When starting a new blank KMP project it is easier to have a mono-repo structure like this:</description></item><item><title>Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform</title><link>https://www.marcogomiero.com/posts/2020/kotlin-serialization-alamofire/</link><pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate><guid>https://www.marcogomiero.com/posts/2020/kotlin-serialization-alamofire/</guid><description>If you are starting a project with Kotlin Multiplatform and you want to share the network layer, the best way to go is definitely with Ktor. But if you don’t want to share the entire network layer but maybe only the DTOs? There could be many reasons for wanting this. Maybe you are starting to integrate Kotlin Multiplatform (I’ll call it KMP in the rest of the article) into an existing project and the work for sharing the entire network layer is simply too much.</description></item><item><title>Choosing the right architecture for a [new] Kotlin Multiplatform, Jetpack Compose and SwiftUI app</title><link>https://www.marcogomiero.com/posts/2020/kmm-shared-app-architecture/</link><pubDate>Fri, 23 Oct 2020 00:00:00 +0000</pubDate><guid>https://www.marcogomiero.com/posts/2020/kmm-shared-app-architecture/</guid><description>Recently, I&amp;rsquo;ve started to work on (yet another) side project: Money Flow. As the name suggests, this is an application to help me track all the expenses and incomes. I&amp;rsquo;ve thought and designed it almost a year ago but only now I&amp;rsquo;ve found the time to start writing actual code.
A first design iteration, that will change a bit
I’ve decided to make this project a personal playground for a Kotlin Multiplatform mobile app.</description></item></channel></rss>