[{"categories":null,"content":"13 November 2021 - DevFest Romania ","date":"6 Oct 2021","objectID":"/talks/2021/kmp-existing-project-devfest-romania/:0:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-devfest-romania/"},{"categories":null,"content":"Abstract: After discovering a new interesting technology or framework, you will probably start asking yourself how to integrate it into an existing project. That’s because, the possibility to start with a blank canvas is rare (not impossible, but rare). This is also the case for Kotlin Multiplatform, and even though it is still in alpha, you can already start to use it in production applications. In this talk, we will understand which part of the code can be a starting point for sharing, how to consume the shared code and how to structure an existing project to have an as smooth as possible integration. ","date":"6 Oct 2021","objectID":"/talks/2021/kmp-existing-project-devfest-romania/:1:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-devfest-romania/"},{"categories":null,"content":"11 November 2021 - droidcon Italy ","date":"5 Oct 2021","objectID":"/talks/2021/shared-code-kmp-droidcon-ita/:0:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-droidcon-ita/"},{"categories":null,"content":"Abstract: Kotlin Multiplatform is an alpha feature that you can use to share code between different platforms. Even if it is in alpha stage, it is already possible to start using it in production applications. In this talk, I will share the discussion that led us to Kotlin Multiplatform, and the following processes we put in place to start using it in production for an Android, iOS, and backend project. I will show you what parts of the code you can (gradually) start to share and how to integrate with existing standalone projects. ","date":"5 Oct 2021","objectID":"/talks/2021/shared-code-kmp-droidcon-ita/:1:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-droidcon-ita/"},{"categories":null,"content":"Slides: ","date":"5 Oct 2021","objectID":"/talks/2021/shared-code-kmp-droidcon-ita/:2:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-droidcon-ita/"},{"categories":null,"content":"Video: Coming Soon ","date":"5 Oct 2021","objectID":"/talks/2021/shared-code-kmp-droidcon-ita/:3:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-droidcon-ita/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/shared-hn-android-ios-backend ","date":"5 Oct 2021","objectID":"/talks/2021/shared-code-kmp-droidcon-ita/:4:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-droidcon-ita/"},{"categories":null,"content":"03 November 2021 - We Are Developers - Mobile Day ","date":"4 Oct 2021","objectID":"/talks/2021/kmp-existing-project-we-are-developers/:0:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-we-are-developers/"},{"categories":null,"content":"Abstract: After discovering a new interesting technology or framework, you will probably start asking yourself how to integrate it into an existing project. That’s because, the possibility to start with a blank canvas is rare (not impossible, but rare). This is also the case for Kotlin Multiplatform, and even though it is still in alpha, you can already start to use it in production applications. In this talk, we will understand which part of the code can be a starting point for sharing, how to consume the shared code and how to structure an existing project to have an as smooth as possible integration. ","date":"4 Oct 2021","objectID":"/talks/2021/kmp-existing-project-we-are-developers/:1:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-we-are-developers/"},{"categories":null,"content":"Slides: ","date":"4 Oct 2021","objectID":"/talks/2021/kmp-existing-project-we-are-developers/:2:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-we-are-developers/"},{"categories":null,"content":"Video: The session starts at 3:00:00 ","date":"4 Oct 2021","objectID":"/talks/2021/kmp-existing-project-we-are-developers/:3:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-we-are-developers/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/shared-hn-android-ios-backend ","date":"4 Oct 2021","objectID":"/talks/2021/kmp-existing-project-we-are-developers/:4:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-we-are-developers/"},{"categories":null,"content":"30 October 2021 - ADI x GDG Pisa - Android Days: Day 1 ","date":"4 Oct 2021","objectID":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/:0:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/"},{"categories":null,"content":"Abstract: Kotlin Multiplatform is getting more and more hype every day, even if it’s still in alpha. We constantly read of new companies and teams that are trying KMP for experiments and production projects alike. And we’re left wondering: it safe to do so? Why picking KMP over any another cross-platform solution? How to approach it? And, most importantly, is it possible to start using it in existing projects? In this talk, I’ll answer to these questions, clarifying all the doubts and making you ready to use and love Kotlin Multiplatform. ","date":"4 Oct 2021","objectID":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/:1:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/"},{"categories":null,"content":"Slide ","date":"4 Oct 2021","objectID":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/:2:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/"},{"categories":null,"content":"Video The session starts at 1:23:00 ","date":"4 Oct 2021","objectID":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/:3:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2021/hi-meet-kmp-adi-gdg-pisa/"},{"categories":null,"content":" SERIES: Building a backend with Ktor Part 1: Structuring a Ktor project Part 2: How to persist Ktor logs Part 3: How to use an in-memory database for testing on Ktor Usually, in a backend project, there are different instances of the same database: one for production (or more than one, it depends on the architecture), one for staging, and a local one that runs in the development machine. However, for automated testing, none of these databases will be suitable to use. Since the purpose of testing is checking that every part of the software is working as expected, it will be necessary to test also situations where there isn’t any data saved in the database. To achieve that, the database must be cleared after every test (or group of tests) or pre-populated before. An approach to achieve that is using an in-memory database. As the name suggests, all the data will be saved in memory and not on disk, so they can be easily deleted when closing the database connection. Another approach could be using Docker to spin up every time a dedicated container for the database, to have a database that is like the one used in production. In my case, I preferred to use an in-memory solution but if you are interested in the topic, I suggest looking at this article by Philip Hauer: Don’t use In-Memory Databases (H2, Fongo) for Tests In this article, I will cover how to setup an in-memory database with H2 for testing on a Ktor project that uses a MySQL database in production. This post is part of a series of posts dedicated to Ktor where I cover all the topics that made me struggle during development and that was not easy to achieve out of the box. You can check out the other instances of the series in the index above or follow me on Twitter to keep up to date. ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:0:0","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"Setup The ORM that I’ve decided to use is Exposed from Jetbrains. It is very nice to deal with and it offers the possibility to use a typesafe DSL that wraps SQL and a lightweight data access object. Exposed supports different databases like MySQL, H2, PostgreSQL, SQLite. For a complete list, refer to the documentation. Exposed comes with a different set of artifacts that you can decide to use. For this project I’ve added the following: implementation(\"org.jetbrains.exposed:exposed-core:$exposed_version\") implementation(\"org.jetbrains.exposed:exposed-dao:$exposed_version\") implementation(\"org.jetbrains.exposed:exposed-jdbc:$exposed_version\") The connection to the MySQL database is performed with the JDBC driver and with a connection pool provided by Hikari. implementation(\"com.zaxxer:HikariCP:$hikaricp_version\") implementation(\"mysql:mysql-connector-java:$mysql_connector_version\") The last required dependency is H2 that is needed only for tests. testImplementation(\"com.h2database:h2:$h2_version\") ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:1:0","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"Database Connection: The connection and the disposal of the database is performed through a method defined in the DatabaseFactory interface interface DatabaseFactory { fun connect() fun close() } This interface will then have a different implementation, depending on if the server is running in production or for unit or integration testing. The factory implementation used in production creates a private HikariDataSource that will be used by the connect method class DatabaseFactoryImpl(appConfig: AppConfig) : DatabaseFactory { private val dbConfig = appConfig.databaseConfig override fun connect() { Database.connect(hikari()) } private fun hikari(): HikariDataSource { val config = HikariConfig() config.driverClassName = dbConfig.driverClass config.jdbcUrl = dbConfig.url config.username = dbConfig.user config.password = dbConfig.password config.maximumPoolSize = dbConfig.maxPoolSize config.isAutoCommit = false config.transactionIsolation = \"TRANSACTION_REPEATABLE_READ\" // More configuration suggestions from https://github.com/brettwooldridge/HikariCP/wiki/MySQL-Configuration config.validate() return HikariDataSource(config) } override fun close() { // used only on Unit tests } } The connect method will be called inside the Ktor module function during the initialization and the setup of the server. fun Application.module(testing: Boolean = false, koinModules: List\u003cModule\u003e = listOf(appModule)) { ... val databaseFactory by inject\u003cDatabaseFactory\u003e() databaseFactory.connect() ... } As you may have noticed, the DatabaseFactoryImpl class uses some fields provided by AppConfig. These fields are the driver class used for the connection, the name, user, and password of the database, and other fields that are specific to the connection. These fields are placed inside the application.conf file to be able to change them on different instances of the server. ktor { ... database { driverClass = \"com.mysql.cj.jdbc.Driver\" url = \"jdbc:mysql://localhost:3308/chucknorris?useUnicode=true\u0026characterEncoding=UTF-8\" user = \"root\" password = \"password\" maxPoolSize = 3 } } After adding the database block, it is necessary to update accordingly the AppConfig class. data class DatabaseConfig( val driverClass: String, val url: String, val user: String, val password: String, val maxPoolSize: Int ) class AppConfig { lateinit var databaseConfig: DatabaseConfig lateinit var serverConfig: ServerConfig // Place here other configurations } fun Application.setupConfig() { ... // Database val databaseObject = environment.config.config(\"ktor.database\") val driverClass = databaseObject.property(\"driverClass\").getString() val url = databaseObject.property(\"url\").getString() val user = databaseObject.property(\"user\").getString() val password = databaseObject.property(\"password\").getString() val maxPoolSize = databaseObject.property(\"maxPoolSize\").getString().toInt() appConfig.databaseConfig = DatabaseConfig(driverClass, url, user, password, maxPoolSize) } For more informations about the configuration process, you can give a look at the first episode of the series: Structuring a Ktor project ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:2:0","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"Testing For testing, it is necessary to cover two different situations: unit tests and integration tests (in this case I refer to integration tests that involve the server). ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:3:0","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"Setup Integration testing that involves the server is performed with a TestEngine that does not create a web server but hooks directly into the internal mechanism. For more information about testing on Ktor, you can look at the first episode of the series: Structuring a Ktor project. When this type of test is run, the same Ktor module function that initializes the server on production is called. In this way, the connection of the database is automatically performed. When running unit tests instead, the server is not involved, so the connection to the database must be performed manually. These two behaviors can be achieved with two implementations of the DatabaseFactory: DatabaseFactoryForServerTest and DatabaseFactoryForUnitTest. The former receives the configuration data from the AppConfig class since the Ktor module function will be called. class DatabaseFactoryForServerTest(appConfig: AppConfig): DatabaseFactory { ... private fun hikari(): HikariDataSource { val config = HikariConfig() config.driverClassName = dbConfig.driverClass config.jdbcUrl = dbConfig.url config.maximumPoolSize = dbConfig.maxPoolSize config.isAutoCommit = true config.validate() return HikariDataSource(config) } ... } The latter instead has the configuration data hardcoded since the connection to the database must be performed manually. class DatabaseFactoryForUnitTest: DatabaseFactory { ... private fun hikari(): HikariDataSource { val config = HikariConfig() config.driverClassName = \"org.h2.Driver\" config.jdbcUrl = \"jdbc:h2:mem:;DATABASE_TO_UPPER=false;MODE=MYSQL\" config.maximumPoolSize = 2 config.isAutoCommit = true config.validate() source = HikariDataSource(config) return source } ... } Since the database used is H2, the driver and the URL change a bit. The driver class name is now: org.h2.Driver and the URL is: jdbc:h2:mem:;DATABASE_TO_UPPER=false;MODE=MYSQL. The URL specifies also some features: mem -\u003e it tells to use the in-memory version of H2 : -\u003e it does not specify a name for the database DATABASE_TO_UPPER=false -\u003e it disable the default feature of using uppercase for identifiers. For example, if it is not disabled, the table names are uppercase and queries will fail MODE=MYSQL -\u003e it uses the MySQL compatibility mode in order to have the same features of MySQL. To learn more about H2 database settings and features, I suggest you to look at the documentation for settings and features. After the connection to the database, it is necessary to create its structure, since the database will be destroyed after each test (or after a set of tests). To do that, it is possible to use the features of Exposed. After defining a table with the Exposed DSL (for more info about it, give a look at the Exposed documentation): object JokeTable: IdTable\u003cString\u003e(name = \"joke\") { val createdAt = datetime(\"created_at\") val updatedAt = datetime(\"updated_at\") val value = text(\"value\") override val id: Column\u003cEntityID\u003cString\u003e\u003e = varchar(\"joke_id\", 255).entityId() override val primaryKey: PrimaryKey = PrimaryKey(id) } it is possible to create the table: SchemaUtils.create(JokeTable) Since this operation must be repeated for every table, it is better to create a function that can be called inside the DatabaseFactory. object SchemaDefinition { fun createSchema() { transaction { SchemaUtils.create(JokeTable) } } } The connect function in both the database factories will look like that: override fun connect() { Database.connect(hikari()) SchemaDefinition.createSchema() } However, during unit tests, it is necessary to manually close the connection to the database, to be sure that all the data are cleared between each test run. To be able to do that, it is necessary to store in the Factory an instance of HikariDataSource that can be closed with the close method. class DatabaseFactoryForUnitTest: DatabaseFactory { lateinit var source: HikariDataSource ... private fun hikari(): HikariDataSource { val config = HikariConfig() ... source = HikariDataSource(config) return source } ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:3:1","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"Execution As mentioned early, during integration tests that involve the server, the database connection is performed automatically since the Ktor module function will be called. The only thing to do is to replace in the Koin test module the DatabaseFactory implementation from DatabaseFactoryImpl, which is used in production, to DatabaseFactoryForServerTest. val appTestModule = module { ... singleBy\u003cDatabaseFactory, DatabaseFactoryForServerTest\u003e() ... } As you can see in the following example of test, it is not required any initialization or setup in the test class. class JokeResourceTest : AutoCloseKoinTest() { @Test fun `random joke api works correctly`() = withTestServer() { // Setup val joke = transaction { Joke.new(\"joke_1\") { this.value = \"Chuck Norris tests are always green\" this.createdAt = LocalDateTime.now() this.updatedAt = LocalDateTime.now() } } val href = application.locations.href( JokeEndpoint.Random( parent = JokeEndpoint() ) ) handleRequest(HttpMethod.Get, href).apply { assertEquals(HttpStatusCode.OK, response.status()) val response = Json.decodeFromString\u003cJokeDTO\u003e(response.content!!) assertEquals(transaction { joke.id.value }, response.jokeId) assertEquals(transaction { joke.value }, response.jokeContent) } } } On unit tests instead, the connection and the disconnection from the database must be performed manually before and after the test, or whenever it is necessary. class JokeRepositoryImplTest : KoinTest { private lateinit var databaseFactory: DatabaseFactoryForUnitTest private val jokeRepository: JokeRepository by inject() @Before fun setup() { databaseFactory = DatabaseFactoryForUnitTest() databaseFactory.connect() } @After fun tearDown() { databaseFactory.close() } @Test fun `getRandomJoke returns data correctly`() = runBlockingTest { ... } } ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:3:2","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"Conclusions And that’s it for today. You can find the code mentioned in the article on GitHub. In the next episode, I’ll cover database migrations. You can follow me on Twitter to know when I’ll publish the next episodes. ","date":"4 Oct 2021","objectID":"/posts/2021/ktor-in-memory-db-testing/:4:0","tags":null,"title":"How to use an in-memory database for testing on Ktor","uri":"/posts/2021/ktor-in-memory-db-testing/"},{"categories":null,"content":"26 October 2021 - Android Worldwide ","date":"3 Oct 2021","objectID":"/talks/2021/kmp-existing-project-android-worldwide/:0:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-android-worldwide/"},{"categories":null,"content":"Abstract: After discovering a new interesting technology or framework, you will probably start asking yourself how to integrate it into an existing project. That’s because, the possibility to start with a blank canvas is rare (not impossible, but rare). This is also the case for Kotlin Multiplatform, and even though it is still in alpha, you can already start to use it in production applications. In this talk, we will understand which part of the code can be a starting point for sharing, how to consume the shared code and how to structure an existing project to have an as smooth as possible integration. ","date":"3 Oct 2021","objectID":"/talks/2021/kmp-existing-project-android-worldwide/:1:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-android-worldwide/"},{"categories":null,"content":"Slides: ","date":"3 Oct 2021","objectID":"/talks/2021/kmp-existing-project-android-worldwide/:2:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-android-worldwide/"},{"categories":null,"content":"Video: ","date":"3 Oct 2021","objectID":"/talks/2021/kmp-existing-project-android-worldwide/:3:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-android-worldwide/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/shared-hn-android-ios-backend ","date":"3 Oct 2021","objectID":"/talks/2021/kmp-existing-project-android-worldwide/:4:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-android-worldwide/"},{"categories":null,"content":"22 October 2021 - droidcon Berlin ","date":"2 Oct 2021","objectID":"/talks/2021/kmp-existing-project-droidcon-berlin.md/:0:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-droidcon-berlin.md/"},{"categories":null,"content":"Abstract: After discovering a new interesting technology or framework, you will probably start asking yourself how to integrate it into an existing project. That’s because, the possibility to start with a blank canvas is rare (not impossible, but rare). This is also the case for Kotlin Multiplatform, and even though it is still in alpha, you can already start to use it in production applications. In this talk, we will understand which part of the code can be a starting point for sharing, how to consume the shared code and how to structure an existing project to have an as smooth as possible integration. ","date":"2 Oct 2021","objectID":"/talks/2021/kmp-existing-project-droidcon-berlin.md/:1:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-droidcon-berlin.md/"},{"categories":null,"content":"Slides: ","date":"2 Oct 2021","objectID":"/talks/2021/kmp-existing-project-droidcon-berlin.md/:2:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-droidcon-berlin.md/"},{"categories":null,"content":"Video: ","date":"2 Oct 2021","objectID":"/talks/2021/kmp-existing-project-droidcon-berlin.md/:3:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-droidcon-berlin.md/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/shared-hn-android-ios-backend ","date":"2 Oct 2021","objectID":"/talks/2021/kmp-existing-project-droidcon-berlin.md/:4:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/talks/2021/kmp-existing-project-droidcon-berlin.md/"},{"categories":null,"content":" A few days ago, Kotlin 1.5.30 has been released. One of the features contained in the release is the official support for XCFrameworks on Kotlin Multiplatform. XCFramework is a binary that can contain multiple platform-specific variants (even for iOS and macOS at the same time). It has been introduced by Apple during the WWDC 2019 as a replacement for FatFrameworks. Before Kotlin 1.5.30, an XCFramework could be created only by running the xcrun command that will pack the frameworks for every different required platform into an XCFramework. A few weeks ago, I wrote an article to show how to create two Gradle tasks (buildDebugXCFramework and buildReleaseXCFramework) to automate the building of an XCFramework. With Kotlin 1.5.30 these tasks are not necessary anymore and in this article, I will show you how to replace the custom tasks with the official ones. ","date":"30 Aug 2021","objectID":"/posts/2021/kmp-xcframework-official-support/:0:0","tags":null,"title":"Building an XCFramework on Kotlin Multiplatform from Kotlin 1.5.30","uri":"/posts/2021/kmp-xcframework-official-support/"},{"categories":null,"content":"Build an XCFramework with Kotlin 1.5.30 To start using XCFrameworks, it is necessary to create an XCFramework object inside the kotlin block of the build.gradle.kts file. Then, every Apple target should be added to that object. import org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework val libName = “LibraryName” kotlin { val xcFramework = XCFramework(libName) ios { binaries.framework(libName) { xcFramework.add(this) } } ... } After declaring the XCFramework object, three new tasks are added: assemble${libName}XCFramework assemble${libName}DebugXCFramework assemble${libName}ReleaseXCFramework The first one will create both the release and the debug version of the XCFramework, while the others will create only the requested variant. The XCFrameworks are located in the XCFrameworks folder inside the build folder. There will be a subfolder for each of the built variants. . ├── build ├── XCFrameworks ├── debug │ └── LibraryName.xcframework └── release └── LibraryName.xcframework ","date":"30 Aug 2021","objectID":"/posts/2021/kmp-xcframework-official-support/:1:0","tags":null,"title":"Building an XCFramework on Kotlin Multiplatform from Kotlin 1.5.30","uri":"/posts/2021/kmp-xcframework-official-support/"},{"categories":null,"content":"Publish an XCFramework The newly built XCFramework can now be distributed. The distribution can be archived in different ways: for example in a CocoaPods repository, in the Swift Package Manager or with Carthage. Since I’m familiar with CocoaPods, that’s what I’ve always used. To make the publishing process as streamlined as possible, I’ve written a bunch of Gradle tasks to automatically build and publish through git the Debug and Release version of the XCFramework. For the details and to understand how the task works, I suggest you give a look at this article that I wrote a few months ago. These tasks are the same used in the article that I wrote a few weeks ago about XCFrameworks. But they must be updated, since the tasks to build the XCFramework are changed. Publish Debug Version: register(\"publishDevFramework\") { description = \"Publish iOs framework to the Cocoa Repo\" project.exec { workingDir = File(\"$rootDir/../kmp-xcframework-dest\") commandLine(\"git\", \"checkout\", \"develop\").standardOutput } dependsOn(\"assemble${libName}DebugXCFramework\") doLast { copy { from(\"$buildDir/XCFrameworks/debug\") into(\"$rootDir/../kmp-xcframework-dest\") } val dir = File(\"$rootDir/../kmp-xcframework-dest/$libName.podspec\") val tempFile = File(\"$rootDir/../kmp-xcframework-dest/$libName.podspec.new\") val reader = dir.bufferedReader() val writer = tempFile.bufferedWriter() var currentLine: String? while (reader.readLine().also { currLine -\u003e currentLine = currLine } != null) { if (currentLine?.startsWith(\"s.version\") == true) { writer.write(\"s.version = \\\"${libVersionName}\\\"\" + System.lineSeparator()) } else { writer.write(currentLine + System.lineSeparator()) } } writer.close() reader.close() val successful = tempFile.renameTo(dir) if (successful) { project.exec { workingDir = File(\"$rootDir/../kmp-xcframework-dest\") commandLine( \"git\", \"add\", \".\" ).standardOutput } val dateFormatter = SimpleDateFormat(\"dd/MM/yyyy - HH:mm\", Locale.getDefault()) project.exec { workingDir = File(\"$rootDir/../kmp-xcframework-dest\") commandLine( \"git\", \"commit\", \"-m\", \"\\\"New dev release: ${libVersionName}-${dateFormatter.format(Date())}\\\"\" ).standardOutput } project.exec { workingDir = File(\"$rootDir/../kmp-xcframework-dest\") commandLine(\"git\", \"push\", \"origin\", \"develop\").standardOutput } } } } The task now depends on the assemble${libName}DebugXCFramework task, which is officially provided by Kotlin. Then, the only thing to do is to move the XCFramework from the build folder to the CocoaPod repository. copy { from(\"$buildDir/XCFrameworks/debug\") into(\"$rootDir/../kmp-xcframework-dest\") } The task that publishes the release version of the XCFramework is pretty much the same as the debug one, except for the task to build the framework, that is assemble${libName}ReleaseXCFramework, and the location in the build folder: register(\"publishFramework\") { description = \"Publish iOs framework to the Cocoa Repo\" project.exec { workingDir = File(\"$rootDir/../kmp-xcframework-dest\") commandLine(\"git\", \"checkout\", \"master\").standardOutput } // Create Release Framework for Xcode dependsOn(\"assemble${libName}ReleaseXCFramework\") // Replace doLast { copy { from(\"$buildDir/XCFrameworks/release\") into(\"$rootDir/../kmp-xcframework-dest\") } val dir = File(\"$rootDir/../kmp-xcframework-dest/$libName.podspec\") val tempFile = File(\"$rootDir/../kmp-xcframework-dest/$libName.podspec.new\") val reader = dir.bufferedReader() val writer = tempFile.bufferedWriter() var currentLine: String? while (reader.readLine().also { currLine -\u003e currentLine = currLine } != null) { if (currentLine?.startsWith(\"s.version\") == true) { writer.write(\"s.version = \\\"${libVersionName}\\\"\" + System.lineSeparator()) } else { writer.write(currentLine + System.lineSeparator()) } } writer.close() reader.close() val successful = tempFile.renameTo(dir) if (successful) { project.exec { workingDir = File(\"$rootDir/../kmp-xcframework-dest\") commandLine( \"git\", \"add\", \".\" ).standardOutput } project.exec { workingDir = File(\"$rootD","date":"30 Aug 2021","objectID":"/posts/2021/kmp-xcframework-official-support/:2:0","tags":null,"title":"Building an XCFramework on Kotlin Multiplatform from Kotlin 1.5.30","uri":"/posts/2021/kmp-xcframework-official-support/"},{"categories":null,"content":" When you start integrating Kotlin Multiplatform (I’ll call it KMP in the rest of the article) in an existing project you most likely don’t have a mono-repo structure (and making a refactor to achieve this kind of architecture will not be easy). An example of architecture is the following, with a repository for every platform. To understand how to integrate KMP into existing code, give a look at my previous article: “Introducing Kotlin Multiplatform in an existing project” KMP code will be served as a library: the compiler generates a .jar for the JVM, a .aar for Android, and a Framework for iOS. For iOS, the Framework will be a FatFramework, because it is necessary to have in the same package the architecture for the simulator and the real device. In a past article, I’ve explained how to generate a FatFramework and how to distribute it in a CocoaPod repo. It is possible with some Gradle tasks or with the KMP FatFramework Cocoa Gradle plugin that I wrote. However, FatFrameworks seems not to be the “current state of the art” solution to distribute multiple architectures at the same time. In fact, Apple during WWDC 2019 has introduced XCFramework, a binary that can contain multiple platform-specific variants (even for iOS and macOS at the same time). Apple is pushing toward the use of XCFrameworks and you could encounter errors like the following one that happened to Sam Edwards. It WAS working... now... 😭🤔 Any ideas @marcoGomier? pic.twitter.com/K8f5bPO44P — Sam Edwards (@HandstandSam) June 11, 2021 Sam followed the same approach I’ve followed but I never encounter the error! And the reason could be the following: for those who really can't use xcframework, usage of VALIDATE_WORKSPACE = NO, on Build Settings, can be leverage. just make sure to set to YES and then NO so that xcode persists the value onto pbxproj — João Gonçalves (@Chuckytuh) June 12, 2021 Unfortunately, there isn’t native support for XCFrameworks on Kotlin Multiplatform yet (it should come hopefully with Kotlin 1.5.30) and to generate an XCFramework, you have to create manually an XCFramework starting from the different frameworks built by KMP. From Kotlin 1.5.30, XCFrameworks are officialy supported. I wrote another article on how to replace the custom gradle tasks, that are showcased below, with the official ones. Building an XCFramework on Kotlin Multiplatform from Kotlin 1.5.30. xcrun xcodebuild -create-xcframework \\ -framework /path/to/device.framework \\ -debug-symbols /path/to/device.DSYM \\ -framework /path/to/simulator.framework \\ -debug-symbols /path/to/simulator.DSYM \\ -output frameworkName.xcframework This is a boring thing to do manually every time, so there’s room for some scripting. The first step is building a custom Gradle task, named buildDebugXCFramework to build a debug version of the XCFramework. val libName = “LibraryName” register(\"buildDebugXCFramework\", Exec::class.java) { description = \"Create a Debug XCFramework\" dependsOn(\"link${libName}DebugFrameworkIosArm64\") dependsOn(\"link${libName}DebugFrameworkIosX64\") val arm64FrameworkPath = \"$rootDir/build/bin/iosArm64/${libName}DebugFramework/${libName}.framework\" val arm64DebugSymbolsPath = \"$rootDir/build/bin/iosArm64/${libName}DebugFramework/${libName}.framework.dSYM\" val x64FrameworkPath = \"$rootDir/build/bin/iosX64/${libName}DebugFramework/${libName}.framework\" val x64DebugSymbolsPath = \"$rootDir/build/bin/iosX64/${libName}DebugFramework/${libName}.framework.dSYM\" val xcFrameworkDest = File(\"$rootDir/../kmp-xcframework-dest/$libName.xcframework\") executable = \"xcodebuild\" args(mutableListOf\u003cString\u003e().apply { add(\"-create-xcframework\") add(\"-output\") add(xcFrameworkDest.path) // Real Device add(\"-framework\") add(arm64FrameworkPath) add(\"-debug-symbols\") add(arm64DebugSymbolsPath) // Simulator add(\"-framework\") add(x64FrameworkPath) add(\"-debug-symbols\") add(x64DebugSymbolsPath) }) doFirst { xcFrameworkDest.deleteRecursively() } } The first thing to do is building the frameworks for the req","date":"14 Jul 2021","objectID":"/posts/2021/build-xcframework-kmp/:0:0","tags":null,"title":"How to build an XCFramework on Kotlin Multiplatform","uri":"/posts/2021/build-xcframework-kmp/"},{"categories":null,"content":"Gitlab CI/CD offers the possibility to create a pipeline, which runs when something changes in the repository. A pipeline consists of one or more stages that run in order and in these stages, for example, it is possible to build the project, run the tests, create the artifacts, etc. For more information about Gitlab CI/CD, I suggest you look over the documentation. These out-of-the-box solutions really simplify the work to be done to have a CI up and running. For example, this is the configuration file (a file called .gitlab-ci.yml placed at the repository’s root) needed for running all the tests of a Kotlin project. image:openjdk:11-jdkcache:key:${CI_PROJECT_ID}paths:- .gradle/before_script:- export GRADLE_USER_HOME=$(pwd)/.gradle- chmod +x ./gradlewstages:- testtest:stage:testscript:- ./gradlew test --info --stacktrace But, let’s assume that the project is using some libraries that are published on a private Maven repository behind a VPN. The pipeline will fail because it can’t download the dependencies. To connect to a VPN, it is necessary to do some tweaks before starting the stages of the pipeline. And it is possible to do it by writing the commands inside the before_script: phase. For this example, I will use OpenVPN but the script can be adapted for whatever type of VPN. Before writing any code, it is necessary to write some secret variables (the menu is available under Settings \u003e CI/CD \u003e Variables - here for more info). Three variables are necessary: CLIENT_OVPN -\u003e the content of the .ovpn file VPN_USER -\u003e the VPN user VPN_PWD -\u003e the VPN password First of all, some dependencies are needed before_script:...## VPN- echo \"Setup Open VPN\"- which openvpn || (apt-get update -y -qq \u0026\u0026 apt-get install -y -qq openvpn \u0026\u0026 apt-get install -y -qq iputils-ping) Then the secrets need to be loaded: before_script:...- cat \u003c\u003c\u003c $CLIENT_OVPN \u003e /etc/openvpn/client.ovpn- cat \u003c\u003c\u003c $VPN_USER \u003e /etc/openvpn/cred.txt- cat \u003c\u003c\u003c $VPN_PWD \u003e\u003e /etc/openvpn/cred.txt# append at the bottom Now, the connection can be performed: before_script:...- openvpn --config /etc/openvpn/client.ovpn --auth-user-pass /etc/openvpn/cred.txt --daemon To check that everything is ok I make a 30 seconds sleep (yes, it’s brutal but it works) and then I ping the server: before_script:...- sleep 30s- ping -c 1 \u003cyour-ip\u003e And that’s it! Now the pipeline can download all the dependencies, even the ones under VPN. For reference, here’s the complete .gitlab-ci.yml file: image:openjdk:11-jdkcache:key:${CI_PROJECT_ID}paths:- .gradle/before_script:- export GRADLE_USER_HOME=$(pwd)/.gradle- chmod +x ./gradlew## VPN- echo \"Setup Open VPN\"- which openvpn || (apt-get update -y -qq \u0026\u0026 apt-get install -y -qq openvpn \u0026\u0026 apt-get install -y -qq iputils-ping)- cat \u003c\u003c\u003c $CLIENT_OVPN \u003e /etc/openvpn/client.ovpn- cat \u003c\u003c\u003c $VPN_USER \u003e /etc/openvpn/cred.txt- cat \u003c\u003c\u003c $VPN_PWD \u003e\u003e /etc/openvpn/cred.txt - openvpn --config /etc/openvpn/client.ovpn --auth-user-pass /etc/openvpn/cred.txt --daemon- sleep 30s- ping -c 1 \u003cyour-ip\u003estages:- testtest:stage:testscript:- ./gradlew test --info --stacktrace ","date":"28 Jun 2021","objectID":"/posts/2021/gitlab-pipeline-vpn/:0:0","tags":null,"title":"Connect to Open VPN during Gitlab Pipeline","uri":"/posts/2021/gitlab-pipeline-vpn/"},{"categories":null,"content":"1 June 2021 - Droidcon Soft Skills Summit \u0026 Hiring Fair ","date":"1 Jun 2021","objectID":"/talks/2021/remote-is-here-droidcon-soft-skills/:0:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2021/remote-is-here-droidcon-soft-skills/"},{"categories":null,"content":"Abstract: Remote is finally here, and it’s going to stay. In this talk, Marco and Gian will go through what it means to work remotely for a startup – from both a developer and a manager point of view. They’ll share some tips and tricks on how to stay organized and focused, how to manage deadlines and the team organization, how to take care of your mental health, and the pros and cons of hiring remotely. They both work for Uniwhere, a venture-backed startup that went remote-first more than two years ago and is now working with 4 different time-zones. Talk done together with Gianluca Segato. ","date":"1 Jun 2021","objectID":"/talks/2021/remote-is-here-droidcon-soft-skills/:1:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2021/remote-is-here-droidcon-soft-skills/"},{"categories":null,"content":"Slide: ","date":"1 Jun 2021","objectID":"/talks/2021/remote-is-here-droidcon-soft-skills/:2:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2021/remote-is-here-droidcon-soft-skills/"},{"categories":null,"content":"Interactive: .iframe-container { overflow: hidden; padding-top: 56.25%; position: relative; } .iframe-container iframe { border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%; } ","date":"1 Jun 2021","objectID":"/talks/2021/remote-is-here-droidcon-soft-skills/:2:1","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2021/remote-is-here-droidcon-soft-skills/"},{"categories":null,"content":"Static: ","date":"1 Jun 2021","objectID":"/talks/2021/remote-is-here-droidcon-soft-skills/:2:2","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2021/remote-is-here-droidcon-soft-skills/"},{"categories":null,"content":"Video: ","date":"1 Jun 2021","objectID":"/talks/2021/remote-is-here-droidcon-soft-skills/:3:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2021/remote-is-here-droidcon-soft-skills/"},{"categories":null,"content":" SERIES: Building a backend with Ktor Part 1: Structuring a Ktor project Part 2: How to persist Ktor logs Part 3: How to use an in-memory database for testing on Ktor Logs are a vital part of software development. They can be used for debugging, to track specific events during the lifecycle of the product, or to discover unexpected events. Usually, logs are printed in the system output, so they must be saved somewhere to be accessed and read sometime in the future. To achieve persistence it is possible to use a cloud service, like Datadog that receives, processes and maintains all the logs. Cherry on top, it also gives you monitoring and analysis tools right out of the box. However, I think that, in the case of an MVP or an early-stage product, using such services can be overkill. It’s enough to persist the logs in the server and access them later. In this post, I will show how to save on a file the logs produced by a Ktor backend. This post is part of a series of posts dedicated to Ktor where I cover all the topics that made me struggle during development and that was not easy to achieve out of the box. You can check out the other instances of the series in the index above or follow me on Twitter to keep up to date. ","date":"5 May 2021","objectID":"/posts/2021/ktor-logging-on-disk/:0:0","tags":null,"title":"How to persist Ktor logs","uri":"/posts/2021/ktor-logging-on-disk/"},{"categories":null,"content":"Setup logging on Ktor When creating a new Ktor project, the wizard automatically adds the SLF4J library to handle logging. During the initialization of the server, Ktor automatically creates an instance of the Logger and then it is possible to retrieve that instance in different ways. Instead, on business logic classes the Logger instance can be retrieved from the LoggerFactory. val logger = LoggerFactory.getLogger(MyClass::class.java) To avoid writing every time this long line, an helper method can be used: inline fun \u003creified T\u003e T.getLogger(): Logger { return LoggerFactory.getLogger(T::class.java) } class MyClass { private val logger = getLogger() fun main() { logger.info(\"Hello World\") } } ","date":"5 May 2021","objectID":"/posts/2021/ktor-logging-on-disk/:1:0","tags":null,"title":"How to persist Ktor logs","uri":"/posts/2021/ktor-logging-on-disk/"},{"categories":null,"content":"Logger Customization The Logger can be customized with an xml file named logback.xml. On project creation, a default logback file is created and placed in the application resources directory. \u003cconfiguration\u003e \u003cappender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\u003e \u003cencoder\u003e \u003cpattern\u003e%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u003c/pattern\u003e \u003c/encoder\u003e \u003c/appender\u003e \u003croot level=\"trace\"\u003e \u003cappender-ref ref=\"STDOUT\"/\u003e \u003c/root\u003e \u003clogger name=\"org.eclipse.jetty\" level=\"INFO\"/\u003e \u003clogger name=\"io.netty\" level=\"INFO\"/\u003e \u003c/configuration\u003e The file contains three different blocks of configurations (this division is just visual and conceptual, of course, the order of the different entries can be changed and mixed). In the first block, the Appenders are defined. An Appender is responsible to place the log messages in a specific destination. \u003cconfiguration\u003e ... \u003cappender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\u003e \u003cencoder\u003e \u003cpattern\u003e%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u003c/pattern\u003e \u003c/encoder\u003e \u003c/appender\u003e ... \u003c/configuration\u003e In this case, the ConsoleAppender will send the log messages in the Console, i.e. in the Standard Output. Inside the Appender customization, it is also possible to specify the format of the message and add useful information like the timestamp, the logger, the thread, etc. The second block defines for each appender, the level of logging. The levels are 5: ERROR, WARN, INFO, DEBUG, TRACE, and the chosen one includes also the previous. For example, if you choose the TRACE level, all the messages will be sent, and if you choose the INFO level, only the messages with level INFO, WARN, and ERROR will be sent. \u003cconfiguration\u003e ... \u003croot level=\"trace\"\u003e \u003cappender-ref ref=\"STDOUT\"/\u003e \u003c/root\u003e ... \u003c/configuration\u003e In this case, since the appender has logging level TRACE, all the log messages will be sent to the Standard Output. In the third level instead, it is possible to customize the level of a specific logger. \u003cconfiguration\u003e ... \u003clogger name=\"org.eclipse.jetty\" level=\"INFO\"/\u003e \u003clogger name=\"io.netty\" level=\"INFO\"/\u003e ... \u003c/configuration\u003e For example, the DEBUG level can be set for a specific class that is not stable yet. \u003clogger name=\"com.company.package.MyClass\" level=\"DEBUG\"/\u003e If necessary, it is also possible to change at the same time all the levels of the Logger: val root = LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME) as Logger root.level = ch.qos.logback.classic.Level.TRACE This is useful for example to customize the log level if the instance is running on a staging or production server. ","date":"5 May 2021","objectID":"/posts/2021/ktor-logging-on-disk/:2:0","tags":null,"title":"How to persist Ktor logs","uri":"/posts/2021/ktor-logging-on-disk/"},{"categories":null,"content":"Logging on file As you can imagine, to save the log on a file it is necessary to change the Appender. There is FileAppender and RollingFileAppender and I’m going to use the latter. As the name suggests, a RollingFileAppender, does not save the logs in the same file but it “rolls” on different files depending on time, file size, or a mix of the two. This is a smarter solution to choose because otherwise, the log file will be too heavy when used for several days over. \u003cconfiguration\u003e ... \u003cappender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\u003e \u003cfile\u003e${LOG_DEST}/ktor-chuck-norris-sample.log\u003c/file\u003e \u003crollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"\u003e \u003c!-- daily rollover --\u003e \u003cfileNamePattern\u003e${LOG_DEST}/ktor-chuck-norris-sample.%d{yyyy-MM-dd}.log\u003c/fileNamePattern\u003e \u003c!-- keep 90 days' worth of history capped at 3GB total size --\u003e \u003cmaxHistory\u003e${LOG_MAX_HISTORY}\u003c/maxHistory\u003e \u003ctotalSizeCap\u003e3GB\u003c/totalSizeCap\u003e \u003c/rollingPolicy\u003e \u003cencoder\u003e \u003cpattern\u003e%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u003c/pattern\u003e \u003c/encoder\u003e \u003c/appender\u003e ... \u003c/configuration\u003e First of all, in the RollingFileAppender it is necessary to specify the file where the logs will be saved. To define the location I’ve used an environment variable, so in this way, I can switch locations when I’m running the backend on my local machine. \u003cappender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\u003e ... \u003cfile\u003e${LOG_DEST}/ktor-chuck-norris-sample.log\u003c/file\u003e ... \u003cappender\u003e The variable is then specified in the VM Options field of the running configuration on IntelliJ or in the command line when launching the backend. java -DLOG_DEST=/rbe-data/logs ... After the location, it is necessary to define a rolling policy. In this case, I will use a TimeBasedRollingPolicy, that changes every day the file where the logs are saved. Plus, it will append the date to the old files, to make them more recognizable. ├── logs │ ├── ktor-chuck-norris-sample.2021-03-09.log │ └── ktor-chuck-norris-sample.log In the TimeBasedRollingPolicy, it is also possible to specify a limit on the number of days to persist and total max size. In this case, I’ve specified a maximum of 90 days and 3 GB size. So if there will be 3 GB of data on the 78th day, the logger will start automatically to drop the 1st day of log and so on. \u003cappender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\u003e ... \u003crollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"\u003e \u003c!-- daily rollover --\u003e \u003cfileNamePattern\u003e${LOG_DEST}/ktor-chuck-norris-sample.%d{yyyy-MM-dd}.log\u003c/fileNamePattern\u003e \u003c!-- keep 90 days' worth of history capped at 3GB total size --\u003e \u003cmaxHistory\u003e${LOG_MAX_HISTORY}\u003c/maxHistory\u003e \u003ctotalSizeCap\u003e3GB\u003c/totalSizeCap\u003e \u003c/rollingPolicy\u003e ... \u003c/appender\u003e As for the location, I’ve used an environmental variable for the days, so in this way, I can set only one day of logs when I run the backend on my local machine. java -DLOG_DEST=/rbe-data/logs -DLOG_MAX_HISTORY=90... And as reference, here’s the entire logback file that I’ve described: \u003cconfiguration\u003e \u003cappender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\u003e \u003cencoder\u003e \u003cpattern\u003e%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u003c/pattern\u003e \u003c/encoder\u003e \u003c/appender\u003e \u003cappender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"\u003e \u003cfile\u003e${LOG_DEST}/ktor-chuck-norris-sample.log\u003c/file\u003e \u003crollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"\u003e \u003c!-- daily rollover --\u003e \u003cfileNamePattern\u003e${LOG_DEST}/ktor-chuck-norris-sample.%d{yyyy-MM-dd}.log\u003c/fileNamePattern\u003e \u003c!-- keep 90 days' worth of history capped at 3GB total size --\u003e \u003cmaxHistory\u003e${LOG_MAX_HISTORY}\u003c/maxHistory\u003e \u003ctotalSizeCap\u003e3GB\u003c/totalSizeCap\u003e \u003c/rollingPolicy\u003e \u003cencoder\u003e \u003cpattern\u003e%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u003c/pattern\u003e \u003c/encoder\u003e \u003c/appender\u003e \u003croot level=\"info\"\u003e \u003cappender-ref ref=\"STDOUT\"/\u003e \u003cappender-ref ref=\"FILE\"/\u003e \u003c/root\u003e \u003clogger name=\"org","date":"5 May 2021","objectID":"/posts/2021/ktor-logging-on-disk/:3:0","tags":null,"title":"How to persist Ktor logs","uri":"/posts/2021/ktor-logging-on-disk/"},{"categories":null,"content":"Logging during tests While running tests is not necessary to save logs on file (at least in my case). To customize logging during testing, it is necessary to specify a logback-test.xml inside the test/resources directory. In my case, I just wanted a simple ConsoleAppender. \u003cconfiguration\u003e \u003cappender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"\u003e \u003cencoder\u003e \u003cpattern\u003e%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\u003c/pattern\u003e \u003c/encoder\u003e \u003c/appender\u003e \u003croot level=\"info\"\u003e \u003cappender-ref ref=\"STDOUT\"/\u003e \u003c/root\u003e \u003clogger name=\"org.eclipse.jetty\" level=\"INFO\"/\u003e \u003clogger name=\"io.netty\" level=\"INFO\"/\u003e \u003clogger name=\"Exposed\" level=\"INFO\"/\u003e \u003clogger name=\"ktor.test\" level=\"INFO\"/\u003e \u003c/configuration\u003e ","date":"5 May 2021","objectID":"/posts/2021/ktor-logging-on-disk/:4:0","tags":null,"title":"How to persist Ktor logs","uri":"/posts/2021/ktor-logging-on-disk/"},{"categories":null,"content":"Conclusions And that’s it for today. You can find the code mentioned in the article on GitHub. In the next episodes, I’ll cover in-memory database and migrations. You can follow me on Twitter to know when I’ll publish the next episode. ","date":"5 May 2021","objectID":"/posts/2021/ktor-logging-on-disk/:5:0","tags":null,"title":"How to persist Ktor logs","uri":"/posts/2021/ktor-logging-on-disk/"},{"categories":null,"content":"29 April 2021 - .droidcon ONLINE - Webinar series ","date":"10 Apr 2021","objectID":"/talks/2021/imperative-vs-declarative-droidcon-online/:0:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2021/imperative-vs-declarative-droidcon-online/"},{"categories":null,"content":"Abstract: Nowadays, the mobile world has started to see larger adoption of the declarative style to build UI as opposed to the (not so) old imperative style. This pattern is borrowed from the web world, from frameworks like React and Vue.js and it started to appear in the mobile world first with React Native, then with Flutter and finally, it captured the attention of the “native world” with Jetpack Compose and Swift UI. In this talk, we will explore the declarative style of building UI compared with the imperative one. We will try to enter in this mindset by finding the differences and by looking at some examples of these patterns. ","date":"10 Apr 2021","objectID":"/talks/2021/imperative-vs-declarative-droidcon-online/:1:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2021/imperative-vs-declarative-droidcon-online/"},{"categories":null,"content":"Slide: ","date":"10 Apr 2021","objectID":"/talks/2021/imperative-vs-declarative-droidcon-online/:2:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2021/imperative-vs-declarative-droidcon-online/"},{"categories":null,"content":"Video: ","date":"10 Apr 2021","objectID":"/talks/2021/imperative-vs-declarative-droidcon-online/:3:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2021/imperative-vs-declarative-droidcon-online/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/imperative-vs-declarative ","date":"10 Apr 2021","objectID":"/talks/2021/imperative-vs-declarative-droidcon-online/:4:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2021/imperative-vs-declarative-droidcon-online/"},{"categories":null,"content":" SERIES: Building a backend with Ktor Part 1: Structuring a Ktor project Part 2: How to persist Ktor logs Part 3: How to use an in-memory database for testing on Ktor It’s been a few months since I’ve started working with Ktor to build the backend of Revelop. We decided to go with Ktor because it is a lightweight framework, easy to use and with a gentle learning curve even for a mobile developer. Today I decided to start a series of posts dedicated to Ktor. With these articles, I want to cover all the topics that made me struggle during development and that was not easy to achieve out of the box. To cite a few: using an in-memory database for testing, handling database migration, setting up logging on disk and using dependency injection. In this first instance of the series, I will show how I’ve structured the Ktor project I’m working on. I’ll cover dependency injection, configurations, and testing. But before moving on, a quick introduction about Ktor is mandatory. Ktor is an asynchronous framework for creating microservices, web applications, and more. It’s fun, free, and open source. From ktor.io Ktor is a lightweight framework that lets easily build backends, web applications, mobile and browser applications. It can be used to create both server and client-side applications (it is compatible with Kotlin Multiplatform as well). Ktor is highly configurable with extensions and it is possible to configure a custom pipeline through a Kotlin DSL. And finally, Ktor is truly asynchronous and uses Kotlin Coroutines to make the development easier without the callback hell. This is “an elevator pitch” of Ktor, to know all the details I’ll suggest looking to the documentation. ","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:0:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"Create a new Ktor Project The starting point of a Ktor project definitely lies in the wizard included in IntelliJ. The wizard lets you choose between all the different features that Ktor provides and it will generate a bare-bone project ready to be used. If you don’t like IntelliJ, the wizard is also available on start.ktor.io. The project that I built as a reference for this series contains a few set of features: Call Logging Content Negotiation kotlinx.serialization Locations Routing The project is a simple backend that returns random Chuck Norris jokes. The jokes are saved in a database and they came from the Chuck Norris IO project. The wizard creates a default Application.kt file that contains the module function that initializes the server pipeline, install the selected features, register the routes, etc. In this function, all the configurations and the classes needed to run the server must be provided or initialized. ","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:1:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"Dependency Injection with Koin Before moving on, it is a good idea to setup Dependency Injection. I’ll use Koin, that has built-in support for Ktor. // Koin for Ktor implementation \"io.insert-koin:koin-ktor:$koin_version\" // SLF4J Logger implementation \"io.insert-koin:koin-logger-slf4j:$koin_version\" To use Koin, it is necessary to install the appropriate feature inside the module function. I recommend doing it as the first thing in the setup pipeline. install(Koin) { slf4jLogger() modules(appModule) } val appModule = module { single\u003cMyClass\u003e() single\u003cJokeRepository\u003e { JokeRepositoryImpl() } } The Koin module is defined in a separate file, just to keep the Application class and the Ktor module function as clean as possible. After that, the dependency graph is built, and inside Application, Routing and Route scope, it is possible to retrieve the dependencies like in a KoinComponent val myClass by inject\u003cMyClass\u003e() For more information about Koin on Ktor, refer to the documentation ","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:2:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"Configuration On Ktor it is possible to set some configurations, like host address and port, in code (if using the embeddedServer) or in an external file (application.conf) with the HOCON format (if using the EngineMain). The wizard automatically creates an application.conf file in the application resources directory. ktor { deployment { port = 8080 port = ${?PORT} } application { modules = [com.prof18.ktor.chucknorris.sample.ApplicationKt.module] } } . └── src ├── main │ ├── kotlin │ │ └── com │ │ └── ... │ └── resources │ ├── application.conf └── test ├── kotlin │ └── com │ └── ... └── resources ├── ... This configuration file will be automatically loaded and parsed by Ktor when the server is started. It is also possible to provide a custom configuration file instead of the one from resources with a command-line argument: java -jar ktor-backend.jar -config=/config-folder/application.conf This is helpful for example to provide different configurations for databases or for external service (in part 3 I’ll show a use case of this feature). But, besides the default value provided by the framework, it is possible to create custom configurations to use later in the code. For example, I’ve created a new section with a Boolean field that will indicate if the instance is running on a staging or production server. ktor { ... server { isProd = false } ... } Every section will be mapped in the code with a data class data class ServerConfig( val isProd: Boolean ) that is contained in a wider class, named AppConfig with all the different custom configurations. class AppConfig { lateinit var serverConfig: ServerConfig // Place here other configurations } The fields of this class then will be initialized inside the Application scope. fun Application.setupConfig() { val appConfig by inject\u003cAppConfig\u003e() // Server val serverObject = environment.config.config(\"ktor.server\") val isProd = serverObject.property(\"isProd\").getString().toBoolean() appConfig.serverConfig = ServerConfig(isProd) } With this setup, when a configuration field must be accessed, the AppConfig class can be simply retrieved from Koin. ","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:3:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"Project structure The structure of a project is a completely subjective topic and it does not invalidate the functionalities nor the correct behavior. However, I think that properly structuring a project is beneficial for better maintainability and scalability. Here, I will share a structure that worked for me and that I found interesting. If you have any suggestion about alternative structures or if you notice something wrong in what I’m sharing, feel free to reach me out on Twitter @marcoGomier. Since the Application.kt file is the entrypoint for the server, I left it at the root level of the src \u003e main \u003e kotlin \u003e \u003cpackage-name\u003e folder. Then, I’ve created a bunch of folders that contain “configuration code”: di: it contains the code where the Koin modules are defined, as described above config: it contains the code that maps the configuration fields from the application.conf file, as described above database: it contains the code necessary to open (and close) the connection to the database. I’ll describe it in the next articles of the series. . ├── Application.kt ├── config │ └── AppConfig.kt ├── database │ ├── DatabaseFactory.kt │ └── DatabaseFactoryImpl.kt ├── di └── AppModule.kt Then, I’ve created the features folder. This top-level folder contains, as the name suggests, all the different features of the backend. For example, if the backend provides a set of API calls to authenticate a user, to handle jokes (get, create, delete, etc), and to handle the user (logout, update some settings, etc) there will be three different folders: . ├── features ├── auth │ └── ... ├── jokes │ └── ... └── user └── ... In the sample project, the backend will provide only an API to get a random Joke, so there will be only a folder named jokes under the features folder. The structure of every “feature folder” will follow some principles of the Clean Architecture. I’ve decided to stick with it because I’ve used it in some Android projects and I like it. But, this will be an adapted solution with only some aspects of the architecture. If you don’t know Clean Architecture and you want to know more about it, I suggest giving a look at the Uncle Bob’s article and, if you are an Android developer, to this Ray Wenderich’s article. The layers of Clean Architecture that I’ve used here are 3: data domain presentation The data layer contains the definitions of all the data sources. In this case, all the needed data are contained in the database, so there will be only code needed to interact with the database. └── jokes ├── data ├── JokeLocalDataSource.kt ├── JokeLocalDataSourceImpl.kt └── dao └── Joke.kt If the backend needs also to retrieve data from other APIs, here there will be also a remote data source. └── jokes └── data ├── local │ ├── JokeLocalDataSource.kt │ ├── JokeLocalDataSourceImpl.kt │ └── dao │ └── Joke.kt └── remote ├── JokeRemoteDataSource.kt ├── JokeRemoteDataSourceImpl.kt └── dto └── JokeRemoteDTO.kt The domain layer contains the models, the business logic, and the mappers between the DAOs and the DTOs. The business logic is implemented by following the Repository pattern. The repository will contain the code necessary to retrieve, save and manipulate data from the data sources. └── jokes ├── domain ├── JokeRepository.kt ├── JokeRepositoryImpl.kt ├── mapper │ └── DTOMapper.kt └── model └── JokeDTO.kt And at the end, the presentation layer. Since this is not an application with a user interface, I decided to change the name from presentation to resource. In this layer, there will be the definitions of the REST endpoints that the backend exposes. I’ve decided to use the word resource because I like to think that REST endpoints are resources that give or handle data. This is just a personal opinion, for example, you can call these layer `controller or whatever. └── jokes └── resource └── JokeResource.kt The JokeResource file will contain the classes that define each route and an extension function of Route that contains the definition of","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:4:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"Testing And last but not least, testing. Ktor is designed to allow easily testable applications. It does not create a web server but it hooks directly into the internal mechanism with a TestEngine. In this way, the execution of tests will be quicker rather than spinning up a complete web server for testing. With the withTestApplication function it is possible to set up a test environment and then, with the handleRequest function it is possible to perform the request and verify that the results are the same as expected. @Test fun testRequests() = withTestApplication(module(testing = true)) { with(handleRequest(HttpMethod.Get, \"/\")) { assertEquals(HttpStatusCode.OK, response.status()) assertEquals(\"Hello from Ktor Testable sample application\", response.content) } } However, before testing the endpoints, it is necessary to set up the dependencies that the system under test will use and all the custom configurations defined in the application.conf. To populate the configurations, the MapApplicationConfig can be used and passed to the withTestApplication function. fun MapApplicationConfig.createConfigForTesting() { // Server config put(\"ktor.server.isProd\", \"false\") } @Test fun testRequests() = withTestApplication({ (environment.config as MapApplicationConfig).apply { createConfigForTesting() } module(testing = true) // Call here your application's module }) { ... } The dependencies instead will be automatically provided by Koin. But, to provide a fake implementation of a dependency, some changes must be made. As described above, the Koin module is ”hardcoded” inside the Ktor module function (to be precise is defined in another file but not injected in the constructor). install(Koin) { slf4jLogger() modules(appModule) } To modify the Koin module during testing, I’ve modified the Ktor module function to accept a list of Koin modules. This list has as the default value the Koin module that was previously hardcoded. fun Application.module(testing: Boolean = false, koinModules: List\u003cModule\u003e = listOf(appModule)) { install(Koin) { slf4jLogger() modules(koinModules) } } In this way, during testing, it is possible to change one or more dependencies. val appTestModule = module { single\u003cAppConfig\u003e() single\u003cDatabaseFactory\u003e { DatabaseFactoryForServerTest() } single\u003cJokeLocalDataSource\u003e { JokeLocalDataSourceImpl() } } val fakeRepositoryModule = module { single\u003cJokeRepository\u003e { FakeJokeRepository() } } @Test fun testRequests() = withTestApplication({ (environment.config as MapApplicationConfig).apply { createConfigForTesting() } module(testing = true, koinModules = listOf(appTestModule, fakeRepositoryModule)) }) { ... } ","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:5:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"Conclusion Although it seems a boring task, structuring a project is a very important thing. In fact, starting with an unsafe foundation will put your product in danger, making it unscalable and hard to maintain throughout the time. However, there isn’t a right way to structure a project because every project is different and has different needs. What I suggest to do, is to find the right solution for your needs and the structure that I’ve shared here is the one that satisfied me. And that’s it for today. You can find the code mentioned in the article on GitHub. In the next episodes, I’ll cover logging and databases. You can follow me on Twitter to know when I’ll publish the next episode. ","date":"7 Apr 2021","objectID":"/posts/2021/ktor-project-structure/:6:0","tags":null,"title":"Structuring a Ktor project","uri":"/posts/2021/ktor-project-structure/"},{"categories":null,"content":"I’ve been working remotely for a while and during these years I kept improving my work setup. During the last year, I’ve also increased the overall video and audio quality and now I’m pretty confident I’ve ended up with something worth sharing. A little note before moving on. Some gears I will share are cheap and others are expensive but I think that every product is one of the best that can be found in its price range. Because I think that for some stuff it is not worth spending too much to get the job done. ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:0:0","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Desk The core of this article is audio and video, but I want to spend just a few words also on peripherals. ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:1:0","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Keyboard It’s been almost two years since I bought the Apple Magic Keyboard with Numeric Keypad and I’m pretty happy about it. In the past, I’ve used a crappy and cheap mechanical keyboard and at the end of the day, my fingers were really tired, and plus, I was making a lot of noise. That’s why I decided to switch to the Apple Keyboard but I’m not at all excluding trying a better quality mechanical keyboard sometime in the future. ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:1:1","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Mouse As a mouse, I’m using the Logitech MX Master, one of the best mouse I ever tried. It is really comfy and its secondary button will improve productivity. In fact, with the Logitech software, it is possible to customize the behavior of this button and even the gesture that you can do after clicking that button. With the click on the button, I open the Mission Control on macOS, with a down gesture (after clicking the button) I show the desktop and with a right or left one I move between the desktops. ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:1:2","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Audio If I have to choose only one gear to buy, I will definitely buy a microphone. A microphone really changes the way you are heard during calls. That’s because the internal microphone of the computer captures all the noise around (fan included) while an external one will capture mostly the sound in front of it. After some research, I decided to buy the Blue Yeti Nano The Blue Yeti Nano is a USB condenser microphone and it is the youngest brother of the famous Blue Yeti. Compared to the Blue Yeti, the nano version does not have the Bidirectional Mode (useful only if you are doing interviews) and it uses 24-bit rather than 16. The microphone includes a stand but, to avoid the sound that comes from vibrations and to save space on the desk, I suggest buying a mic arm. There are different types of arms, with different materials and different tilts. Since I didn’t need something fancy, I’ve bought a simple one suggested by Amazon Besides an arm, I suggest you also buy a pop filter to reduce the popping sound (the sound of the letters “b” and “p”). Again, as for the arm, I trusted Amazon and I bought a simple one. To complete the setup, a pair of headphones is needed. I’m not an audiophile neither an audio guru, so I took the advice of a friend of mine and I bought the Beyerdynamic DT 770 Pro I’m very satisfied with the choice. These headphones are very comfortable and they sound amazing. ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:2:0","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Video Webcams on laptops are crappy. And every time I’m surprised about that because even a cheap smartphone has a better front-facing camera. Anyway, the video can be improved with an external webcam or even by using a mirrorless/reflex. But the point here is not to purchase a camera just to use it as a webcam but to use the camera sitting in the drawer. To use a camera as a webcam, it is necessary to use an HDMI capture card. There are different expensive versions but I’ve decided to buy a cheaper one because I only need to capture the camera stream. If you are planning to use it for recording other sources (like for example videogames, tv, etc) you should go with more expensive solutions like the one from Elgato. This cheap capture card does its job very well. After connecting the camera through HDMI and the card to the computer USB, the computer will recognize the card as a webcam. Then this “new” webcam can be selected in the settings of video-call software. In order to make this “trick” work, a clean video output (without the over impression information about ISO, focus, etc) of the camera is needed. And my camera, a Sony Alpha 5000, does not have it. But with some tweaks I was able to achieve it. Fortunately, starting from the 5100 model, the clean output is supported by default. And there is another trick to have “infinite” battery life. For Sony cameras, there are available fake batteries that can be plugged into the power supply. But every big, fancy, and expensive piece of equipment is useless without proper lighting. To enhance the light of my setup, I am using a softbox. This is quite bulky and instead it is better to use a desk led panel (I’m using a softbox because it is a “leftover” from my previous life as tech reviewer). And last but not least the monitor. I’ve recently switched to a wide monitor from a two-monitor setup and I couldn’t be happier. In this way, I can put some content just in the middle of the screen while this is not possible with a two-monitor setup. I’ve chosen a 34” MSI Optix MAG341CQ (it’s a gaming monitor, but it’s perfect also for working). ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:3:0","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Conclusions: And that’s my setup! If you have any kind of suggestions about gear, improvements, whatever, feel free to reach me out on Twitter @marcoGomier. I know that can be expensive, but if you have the possibility, with not so much effort, you can really improve your audio and video quality. If you are doing talks, webinars, video tutorial, etc the video improvements really make a difference. Otherwise, if you are doing only video calls, I would invest in a decent microphone. If you are interested in different suggestions and setup, I suggest you look over Emma Bostian’s article and Sebastiano Poggi’s one, which inspired me to improve my setup and to write about it. Note: Some links contained in this article are affiliate links. It cost nothing to you, but they can support my work. ","date":"24 Mar 2021","objectID":"/posts/2021/audio-video-setup/:4:0","tags":null,"title":"My audio \u0026 video setup after 4 years of remote working","uri":"/posts/2021/audio-video-setup/"},{"categories":null,"content":"Today I want to share KMP FatFramework Cocoa, a Gradle plugin for Kotlin Multiplatform projects that generate a FatFramework for iOS targets and manages the publishing process in a CocoaPod Repository. The plugin is born from a set of unbundled Gradle tasks that I wrote to manage the building and the publishing process of Kotlin Multiplatform libraries for iOS that we use at Uniwhere and Revelop. The libraries are published in a FatFramework that contains the code for every required architecture (real devices use the Arm64 architecture, while the simulator uses the host computer architecture which in most of the cases is X64). After copying and pasting the task between different projects, I thought that having them bundled into a Gradle plugin, would be a good idea. ","date":"2 Mar 2021","objectID":"/posts/2021/kmp-fatframework-cocoa-release/:0:0","tags":null,"title":"Introducing KMP FatFramework Cocoa, a Gradle plugin for iOS FatFramework","uri":"/posts/2021/kmp-fatframework-cocoa-release/"},{"categories":null,"content":"Features The plugin is composed of a bunch of tasks that let you build the FatFramework with the Debug or Release target, publish both the versions to a CocoaPod repository, and also create the repository. The task that publishes the debug version of the FatFramework will use the develop branch of the CocoaPod repository, while the task for the release version will use the main (or master) branch and it will also tag the release with the provided version number. In this way, in the iOS project you can get the latest changes published on the develop branch: pod '\u003cyour-library-name\u003e', :git =\u003e \"git@github.com:\u003cgit-username\u003e/\u003crepo-name\u003e.git\", :branch =\u003e 'develop' or specify a tag to get the release version: pod '\u003cyour-library-name\u003e', :git =\u003e \"git@github.com:\u003cgit-username\u003e/\u003crepo-name\u003e.git\", :tag =\u003e '\u003cversion-number\u003e' For all the details about the tasks and the required configurations, you can give a look at the documentation on the GitHub repo. Instead, if you are interested in the internals of the tasks, I’ve recently written an article about the topic. This is my first Gradle plugin and I’ve learned a lot during the process. If you notice a bug or something strange, feel free to report it on GitHub or to contribute (contributions are always appreciated). And, if you have any suggestion or any kind of doubt, feel free to reach me out on Twitter @marcoGomier. ","date":"2 Mar 2021","objectID":"/posts/2021/kmp-fatframework-cocoa-release/:1:0","tags":null,"title":"Introducing KMP FatFramework Cocoa, a Gradle plugin for iOS FatFramework","uri":"/posts/2021/kmp-fatframework-cocoa-release/"},{"categories":null,"content":" After discovering a new interesting technology or framework, you will probably start asking yourself how to integrate it into an existing project. That’s because, the possibility to start with a blank canvas is rare (not impossible, but rare). This is also the case for Kotlin Multiplatform (I’ll call it KMP in the rest of the article). When starting a new blank KMP project it is easier to have a mono-repo structure like this: . └── kmm-project ├── androidApp ├── iosApp └── shared However, existing projects most likely don’t have a mono-repo structure. And making a refactor to achieve this structure can be extremely difficult for time or management constraints. But KMP is built around the concept of sharing as much non-UI code as possible, and it is possible to start sharing a little piece of tech stack. Then, this “little piece of tech stack” will be served to the existing projects as a library. Where to start from is subjective and it depends on the specific project, but there are some parts that better suit this topic. For example, all the boilerplate code (constants, data models, DTOs, etc), that is boring to write and is more error-prone. Or it could be a feature that centralizes the source of truth (e.g. if a field is nullable or not) because with a single source of truth there will also be a single point of failure. Or it could be some utility or analytics helper that every project has. An important thing to take in mind is that all the features chosen for sharing must have the possibility to be extracted gradually. That’s because, during the evaluation process of KMP, it is better to make a final decision without using too much time. For example, it will be not a good idea to start sharing the entire network layer because you will risk ending up with useless work if KMP is not the right solution for the project. Otherwise, starting with some small features like a DTO or a data model will require less “extraction time” and it will leave enough time to work on the architecture needed to have a Kotlin Multiplatform library in an existing project. For example, at Uniwhere we have decided to start with some DTOs and after validating the process, we have migrated all the others. ","date":"25 Feb 2021","objectID":"/posts/2021/kmp-existing-project/:0:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/posts/2021/kmp-existing-project/"},{"categories":null,"content":"Publishing Architecture The architecture of an existing project with Kotlin Multiplatform will look like this: There is a repository for every platform: a repository for the KMP library; a repository for the Backend; a repository for the Android app; a repository for the iOS app. As mentioned early on, the KMP code is served as a library. The compiler generates a .jar for the JVM, a .aar for Android, and a Framework for iOs. The .jar and the .aar can be published in a Maven repository. A Framework can be published in different places: for example in a CocoaPods repository, in the Swift Package Manager or with Carthage. Since I’m familiar with CocoaPods (and because we are using it at Uniwhere), I’ve decided to stick with it. ","date":"25 Feb 2021","objectID":"/posts/2021/kmp-existing-project/:1:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/posts/2021/kmp-existing-project/"},{"categories":null,"content":"Publishing for Android and the JVM The amount of work needed to publish a JVM and an Android library to Maven is pretty straightforward, thanks to the Maven Publish Plugin. Only a few lines of configuration on the build.gradle.kts file, are necessary (here I’m assuming that you have already configured a Maven repository since it’s not the scope of the article to explain how. Otherwise, you can use a local Maven repository on your computer that does not require any kind of configuration): plugins { //... id(\"maven-publish\") } group = \"\u003cyour-group-id\u003e\" artifactId = \"\u003cyour-library-name\u003e\" // If not specified, it will use the name of the project version = \"\u003cversion-name\u003e\" // This block is only needed to publish on a online maven repo publishing { repositories { maven{ credentials { username = \"\u003cusername\u003e\" password = \"\u003cpwd\u003e\" } url = url(\"https://mymavenrepo.com\") } } } After that, it is possible to build and publish the KMP library with the ./gradlew publish command (or with ./gradlew publishToMavenLocal). Then, it is possible to pull the library on Android: implementation(\"\u003cyour-group-id\u003e:\u003cyour-library-name\u003e-android:\u003cversion-name\u003e\") and on the JVM project: implementation(\"\u003cyour-group-id\u003e:\u003cyour-library-name\u003e-jvm:\u003cversion-name\u003e\") ","date":"25 Feb 2021","objectID":"/posts/2021/kmp-existing-project/:1:1","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/posts/2021/kmp-existing-project/"},{"categories":null,"content":"Publishing for iOs On iOS things are harder. Pack for Xcode On newly created KMP projects, there is a Gradle task, named packForXcode, that automatically builds the framework and places it in a specific build folder. val packForXcode by tasks.creating(Sync::class) { group = \"build\" val mode = System.getenv(\"CONFIGURATION\") ?: \"DEBUG\" val sdkName = System.getenv(\"SDK_NAME\") ?: \"iphonesimulator\" val targetName = \"ios\" + if (sdkName.startsWith(\"iphoneos\")) \"Arm64\" else \"X64\" val framework = kotlin.targets.getByName\u003cKotlinNativeTarget\u003e(targetName).binaries.getFramework(mode) inputs.property(\"mode\", mode) dependsOn(framework.linkTask) val targetDir = File(buildDir, \"xcode-frameworks\") from({ framework.outputDirectory }) into(targetDir) } tasks.getByName(\"build\").dependsOn(packForXcode) This task is automatically called by Xcode when the iOS (or macOS) application is built. The task uses the configuration of the iOS project to define the build mode and the target architecture. val mode = System.getenv(\"CONFIGURATION\") ?: \"DEBUG\" val sdkName = System.getenv(\"SDK_NAME\") ?: \"iphonesimulator\" val targetName = \"ios\" + if (sdkName.startsWith(\"iphoneos\")) \"Arm64\" else \"X64\" The build mode can be RELEASE or DEBUG while the target name depends on the architecture which we are building for. The real devices use the Arm64 architecture, while the simulator uses the host computer architecture which in most of the cases is X64 (at least until when Apple Silicon will be sufficiently spread). And this is the problem of this task! Since the aim is to publish a framework to be used by an existing project, it’s impossible to know a priori which architecture is necessary or the build mode. Update: Starting from Kotlin 1.5.20, there is a new task provided by the Kotlin Multiplatform Gradle Plugin named embedAndSignAppleFrameworkForXcode that replaces the packForXcode one. The aim of this task is the same as the old one, that is publishing a framework to be used by an existing project. So it’s impossible to know a priori which architecture is necessary or the build mode. For more info, give a look at the Jetbrains blogpost. CocoaPods Gradle Plugin Another way to build a framework from the KMP code is using the CocoaPods Gradle Plugin. This plugin builds the framework and places it inside a CocoaPods repository that will be added as dependency on Xcode (The plugin can be used also to add other Pod libraries on the native target). To start using the plugin, some configurations are necessary: plugins { kotlin(\"multiplatform\") version \"1.4.10\" kotlin(\"native.cocoapods\") version \"1.4.10\" } // CocoaPods requires the podspec to have a version. version = \"1.0\" kotlin { cocoapods { // Configure fields required by CocoaPods. summary = \"Some description for a Kotlin/Native module\" homepage = \"Link to a Kotlin/Native module homepage\" // You can change the name of the produced framework. // By default, it is the name of the Gradle project. frameworkName = \"\u003cframework-name\u003e\" } } Then, during the build, the Podspec file (a file that describes the Pod library - it contains the name, version, and description, where the source should be fetched from, what files to use, the build settings to apply, etc) is generated starting from the information provided in the cocoapods block. The Podspec contains also a script that is automatically added as a build script, called every time the iOS application is built, like packForXcode. spec.script_phases = [ { :name =\u003e 'Build shared', :execution_position =\u003e :before_compile, :shell_path =\u003e '/bin/sh', :script =\u003e \u003c\u003c-SCRIPT set -ev REPO_ROOT=\"$PODS_TARGET_SRCROOT\" \"$REPO_ROOT/../gradlew\" -p \"$REPO_ROOT\" :shared:syncFramework \\ -Pkotlin.native.cocoapods.target=$KOTLIN_TARGET \\ -Pkotlin.native.cocoapods.configuration=$CONFIGURATION \\ -Pkotlin.native.cocoapods.cflags=\"$OTHER_CFLAGS\" \\ -Pkotlin.native.cocoapods.paths.headers=\"$HEADER_SEARCH_PATHS\" \\ -Pkotlin.native.cocoapods.paths.frameworks=\"$FRAMEWORK_SEARCH_PATHS\" SCRIPT } ] Unfortunately,","date":"25 Feb 2021","objectID":"/posts/2021/kmp-existing-project/:1:2","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/posts/2021/kmp-existing-project/"},{"categories":null,"content":"Conclusions As shown in this article, the process of integrating Kotlin Multiplatform in an existing project requires more work on the architecture side. That’s why is preferable to start sharing a feature that can be extracted gradually. The framework to follow is: Start little and then go bigger. By starting little, it is possible to validate the process with a “contained” effort, and then, after the validation, it is possible to go bigger and start sharing more and more features. For example at Uniwhere, we started sharing the DTOs and after validating the process, we decided to share also the persistence layer with SQLDelight. All the code that I showed in this article came from a sample that I’ve published on GitHub (if you are interested only in the custom Gradle task, click here). This sample is composed of an Android app, an iOs app, and a backend that share some common code via a Kotlin Multiplatform library. Update: I’ve grouped all the tasks mentioned in the article in a Gradle plugin! To know more about it, give a look to this post. ","date":"25 Feb 2021","objectID":"/posts/2021/kmp-existing-project/:2:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/posts/2021/kmp-existing-project/"},{"categories":null,"content":"Bonus: I’ve spoke about this topic in a talk in the Kotlin Dev Room at Fosdem 2021. Here’s the recording of the session: and the slides: ","date":"25 Feb 2021","objectID":"/posts/2021/kmp-existing-project/:3:0","tags":null,"title":"Introducing Kotlin Multiplatform in an existing project","uri":"/posts/2021/kmp-existing-project/"},{"categories":null,"content":" As you may have heard, JCenter is shutting down in May 2021. Into the Sunset on May 1st: Bintray, JCenter, GoCenter, and ChartCenter https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/ So, if you are using JCenter as the repository for your libraries (as me), it’s time to migrate. In this article, I will not go through the publishing process of a library to MavenCentral, because there are already plenty of resources available. For example, I followed the one written by Márton Braun. Publishing Android libraries to MavenCentral in 2021 https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/ Instead, the topic of this article is to show how to manually migrate the old artifacts of a library without recompiling them. It’s important to migrate also the old artifacts because not all the users of your library are using the latest version. But if the library is old, it’s difficult to recompile it from scratch. For example, I’ve tried to manually rebuild the first version of YoutubeParser, but I quickly failed because it was using a version of the Android Gradle Plugin of 5 years ago that is now incompatible with Android Studio 4. ","date":"11 Feb 2021","objectID":"/posts/2021/move-libray-jcenter-to-maven/:0:0","tags":null,"title":"Migrating old artifacts from JCenter to MavenCentral","uri":"/posts/2021/move-libray-jcenter-to-maven/"},{"categories":null,"content":"Download old artifacts from Bintray The first thing to do is downloading the old library’s artifacts from Bintray. It is possible to download them, directly from the Bintray directory page: https://bintray.com/package/files/{your-bintray-username}/maven/{your-library-name} For example, this is the URL for my other library, RSS-Parser: https://bintray.com/package/files/prof18/maven/RSS-Parser Here, it is possible to download the artifacts by simply clicking on them. ","date":"11 Feb 2021","objectID":"/posts/2021/move-libray-jcenter-to-maven/:1:0","tags":null,"title":"Migrating old artifacts from JCenter to MavenCentral","uri":"/posts/2021/move-libray-jcenter-to-maven/"},{"categories":null,"content":"Sign artifacts The next step is signing the artifacts, with a GPG key (to generate one, you can follow the instruction on Márton‘s article). The command to perform the signing is the following: gpg -ab rssparser-1.0.pom Remember that all the files uploaded to MavenCentral must be signed. In my case, I have to sign the .aar file, the .pom and the jar that contains the sources and the JavaDoc of the library. The signing command produces a .asc file, that must be uploaded as well on MavenCentral. ","date":"11 Feb 2021","objectID":"/posts/2021/move-libray-jcenter-to-maven/:2:0","tags":null,"title":"Migrating old artifacts from JCenter to MavenCentral","uri":"/posts/2021/move-libray-jcenter-to-maven/"},{"categories":null,"content":"Manual upload artifacts Now, it’s time to upload the artifacts. Login on Sonatype and from the menu on the left, select Staging Upload First of all, in the Staging Upload section, it is necessary to upload the pom file. Switch the upload mode to Artifact(s) with a pom in the dropdown window and then select to pom to upload. Then, in the section below, it is possible to upload the other artifacts. To do that, it is necessary to select them from the file system with the Select Artifact(s) to Upload… button and then add them to the list with the Add Artifact button. Don’t forget to upload also the signatures (the .asc files)! After adding all the artifacts, upload them with the Upload Artifact(s) button. It is also necessary to provide a brief description, for example 1.1 manual upload It could happen the the upload is stuck and the progress bar never goes away. If it happens, reload the page and redo the process (I’ve noticed that it can happen when the browser tab is open for a while). After the upload is successful, select Staging Repositories from the left menu. Now, the process is the same as when the artifacts are upload from Android Studio (or from the CI). The only exception is that the close task is started automatically (if it not starts, you can start it manually from the top bar). The close task takes a few moments to perform, and after that, it’s time to release the library with the button in the toolbar. And that’s it! After the processing time (usually between 10 to 15 minutes) your library will be available to MavenCentral. ","date":"11 Feb 2021","objectID":"/posts/2021/move-libray-jcenter-to-maven/:3:0","tags":null,"title":"Migrating old artifacts from JCenter to MavenCentral","uri":"/posts/2021/move-libray-jcenter-to-maven/"},{"categories":null,"content":"It’s been a few years since I started writing this blog, and I quite like sharing my thoughts and experiences. After a short while spent on Medium, I decided I wanted to be the sole owner of my content, so I started experimenting with different solutions and ideas. After I finally landed on the “perfect” tech architecture (I know, I’m lying. There’s no perfect solution and Future Me will most likely refactor and (over)re-engineer the current solution), I started to seek the “perfect” writing setup. I’m pretty confident I’ve ended up with something worth sharing. ","date":"11 Jan 2021","objectID":"/posts/2021/running-blog-ipad/:0:0","tags":null,"title":"Running a blog with iPad","uri":"/posts/2021/running-blog-ipad/"},{"categories":null,"content":"A bit about tech stack Before speaking about the setup, I want to spend some words about the tech stack. The site is built with Hugo, one of the most popular static site generator. It is a powerful tool that lets you have a website up and running in just a few minutes. With Hugo, you can write articles or content with Markdown, and then Markdown pages are automatically transformed into HTML and CSS pages when you build the website. But how Hugo works is not the topic of this article, so if you are interested to know a bit more, I suggest you look over the documentation. As mentioned above, the final output of Hugo is a static website and there are many free solutions to host it. To name a few: GitHub Pages or Netlify or Firebase Hosting. Personally, I’ve always used GitHub Pages and I’m still using it. If you have trouble choosing, there is an entire section on the Hugo doc there to help you. For handling the publications, I’ve set up a little GitHub action (you can give a look at it on my GitHub) that builds the website and pushes all the changes to a special branch reserved for GitHub Pages. This action is triggered every time I push something on the master branch. That’s it for the tech stack. It was a quick but necessary overview to better introduce the context but if you have any kind of question, feel free to reach me out on Twitter @marcoGomier. ","date":"11 Jan 2021","objectID":"/posts/2021/running-blog-ipad/:1:0","tags":null,"title":"Running a blog with iPad","uri":"/posts/2021/running-blog-ipad/"},{"categories":null,"content":"Writing Setup My main machine is a 15\" MacBook Pro - a fantastic tool for my day-to-day job. But after using it for writing some articles, I’ve discovered that a 15\" machine is way too heavy, big, and overkill just for blogging. When I’m writing something, I like to stay outside in the courtyard, sitting in the deckchair or in the hammock or in a simple chair. And when the weather does not allow it, I prefer to stay on the couch or in bed rather than in my work setup. And in all of these scenarios, my MacBook is too uncomfortable to use. So I started to think about alternatives. First of all, I’ve tried to resurrect my old Asus T100HA with a lightweight Linux distro, but in the end I had to drop it due to issues with some drivers and a battery not at its glory anymore. So, after some thinking, I’ve decided to give iPad a try: blogging doesn’t require a big screen and CPU power, whereas it does ask for a reliable and comfortable machine, with decent autonomy. After some research, I found out that the best compromise between my needs and my budget was the iPad Air 3 (I made this choice back in May 2020. If it was today, I would choose the new iPad Air 4). For the keyboard, I decided to go with the Logitech Combo Touch. To be honest, I quickly fell in love with this Logitech solution. With this keyboard-cover, you will transform the iPad into a notebook. With the kickstand, you can tilt the iPad up to 40 degrees. Then you have a very good trackpad (better than some Window notebooks!), a row of function keys (brightness and volume controls, home button, lock button, spotlight, etc), and backlit keys. The only compromise is the fact that it makes the iPad a bit heavier and thicker. ","date":"11 Jan 2021","objectID":"/posts/2021/running-blog-ipad/:2:0","tags":null,"title":"Running a blog with iPad","uri":"/posts/2021/running-blog-ipad/"},{"categories":null,"content":"Applications As I mentioned above, the website is stored in a git repository and I manage all “the git lifecycle” through Working Copy that I think is the best git client that you can find in the AppStore. Working Copy With Working Copy you can browse the content of the repo but you can also make edits with a built-in editor that also provides the user with syntax highlighting. However, the feature that made me choose this client is the support of the File iOs app, that makes the repositories browsable from other apps too. iOs File app In this way, I can open and edit an article directly from any Markdown editor - for for the time being my go-to choice is MWeb. MWeb I like it because it provides themes, a powerful preview, a useful toolbar with plenty of quick actions, and a lot of keyboard shortcuts. In the past, I’ve used Pretext, a little bit more basic. In the future, I would like to try iA Writer but it is quite expensive and I don’t know if it’s worth the investment (maybe if there will be a demo or a trial version in the future I can finally make a decision). And that’s it! I write an article in MWeb and when I finish it, I publish it on the master branch of the Github repo through Working Client. Then, the GitHub Action is triggered and the article is live. Bonus. If I have to edit or prepare an image for an article (like the ones below), I use Pixelmator, a very good image editor for iOs. Pixelmator ","date":"11 Jan 2021","objectID":"/posts/2021/running-blog-ipad/:2:1","tags":null,"title":"Running a blog with iPad","uri":"/posts/2021/running-blog-ipad/"},{"categories":null,"content":"Automations After writing some articles, I’ve discovered that there are some boring activities to achieve on iPad, like creating a new article, adding a new image for an article, etc. So, during one of the “its-blogging-time-but-i-dont-want-to-write” sessions (procrastination FTW) I decided to automate some of these boring things. Add an image to an article To show an image on a Hugo Markdown page, it is necessary to write a shortcode; for example, for the Pixelmator’s screen posted above the corresponding shortcode is the following: {{\u003c figure src=\"/img/blogging-ipad/pixelmator-screen.png\" link=\"/img/blogging-ipad/pixelmator-screen.png\" caption=\"Pixelmator\" \u003e}} So, every time I need to add an image to an article, I need to: Create a folder into the img folder of the website (if not present. I create a folder for every article just to keep things clean); Move the image from the iPad gallery to the folder created above; Rename the image with a more readable format; Write the shortcode for the image in the article. Way too many steps for a lazy person like me! To try to automate these steps, I started playing with the Apple Shortcuts iOS app. If you’ve never heard about it, I suggest you take a peek. It’s really powerful and it can greatly simplify your life. A shortcut is a quick way to get one or more tasks done with your apps. The Shortcuts app lets you create your own shortcuts with multiple steps. For example, build a “Surf Time” shortcut that grabs the surf report, gives an ETA to the beach, and launches your surf music playlist. Shortcuts user guide After some trials, I was able to achieve my goal and, as you can see in the video, when I need to add an image to an article I can launch a shortcut that does all the job for me. Here’s the “source code” of the shortcut: iOs shortcut to move an image from the camera roll to the repo of the site and generate the Hugo shortcode As you can see in the image above, it is possible to ask for input and then store it in a variable. So, first of all, I receive as input the name of the image and the folder, then I open the system image picker and I store the chosen image in a variable. Then, before moving the image, I extract the file extension of the image and store it in another variable. And now finally, it is time to move the image to the specific folder with the new name. This action is performed with the shortcut support provided by Working Copy. And at the end, I create the shortcode for the specific image and I store it in the clipboard ready to be pasted in the article. Create a new article draft Another boring activity is the creation of a new article. That’s because for every article I need to write some metadata at the top, like the date, the title, etc. --- layout: post title: \"Running a blog with iPad\" date: 2021-01-01 show_in_homepage: false draft: true tags: [Blogging] --- So, I made another shortcut! And here’s the “source code” of this shortcut: iOs shortcut to create a new article draft with some metadata The structure is very similar to the other shortcut. First of all, I make sure that I’m in the develop branch of the website where I make all the draft work. Next, I ask for some input that I store in some variables. As you can see it is also possible to do some if/else statements. And at the end, I create the metadata that will be placed inside the new article. ","date":"11 Jan 2021","objectID":"/posts/2021/running-blog-ipad/:2:2","tags":null,"title":"Running a blog with iPad","uri":"/posts/2021/running-blog-ipad/"},{"categories":null,"content":"Conclusions And that’s how I write in my blog. I’m very happy with this setup because it let me only focus on writing. Every “boring” activity is completely automated and in this way, I have “just” to write. And by using an iPad I’m not tempted to re-open my IDE to procrastinate writing. If you have any kind of suggestions about apps, accessories, whatever, feel free to reach me out on Twitter @marcoGomier. ","date":"11 Jan 2021","objectID":"/posts/2021/running-blog-ipad/:3:0","tags":null,"title":"Running a blog with iPad","uri":"/posts/2021/running-blog-ipad/"},{"categories":null,"content":"7 February 2021 - FOSDEM ","date":"9 Jan 2021","objectID":"/talks/2021/shared-code-kmp-fosdem/:0:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-fosdem/"},{"categories":null,"content":"Abstract: Kotlin Multiplatform is an alpha feature that you can use to share code between different platforms. Even if it is in alpha stage, it is already possible to start using it in production applications. In this talk, I will share the discussion that led us to Kotlin Multiplatform, and the following processes we put in place to start using it in production for an Android, iOS, and backend project. I will show you what parts of the code you can (gradually) start to share and how to integrate with existing standalone projects. ","date":"9 Jan 2021","objectID":"/talks/2021/shared-code-kmp-fosdem/:1:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-fosdem/"},{"categories":null,"content":"Slide: ","date":"9 Jan 2021","objectID":"/talks/2021/shared-code-kmp-fosdem/:2:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-fosdem/"},{"categories":null,"content":"Video: ","date":"9 Jan 2021","objectID":"/talks/2021/shared-code-kmp-fosdem/:3:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-fosdem/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/shared-hn-android-ios-backend/tree/with-ios-fatframework ","date":"9 Jan 2021","objectID":"/talks/2021/shared-code-kmp-fosdem/:4:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2021/shared-code-kmp-fosdem/"},{"categories":null,"content":" If you are starting a project with Kotlin Multiplatform and you want to share the network layer, the best way to go is definitely with Ktor. But if you don’t want to share the entire network layer but maybe only the DTOs? There could be many reasons for wanting this. Maybe you are starting to integrate Kotlin Multiplatform (I’ll call it KMP in the rest of the article) into an existing project and the work for sharing the entire network layer is simply too much. And this was the case for the project that I’m working on. We decided to start integrating KMP and we thought that the perfect target to start with is the DTOs. Because in this way we can define a single source of truth and share it on the backend and the mobile clients. But how to start using KMP in an existing project, is a topic for another article, so stay tuned! In this article, I will show you how to implement a Kotlin Multiplatform Mobile application that performs a network call on the native side with Retrofit (on Android) and Alamofire (on iOs) but the DTOs are defined on KMP side as well as the information about deserialization. And for the deserialization, I will use (of course) the Kotlin Serialization library. ","date":"10 Dec 2020","objectID":"/posts/2020/kotlin-serialization-alamofire/:0:0","tags":null,"title":"Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform","uri":"/posts/2020/kotlin-serialization-alamofire/"},{"categories":null,"content":"API For this example I will use the Bored Api that returns this kind of response: { \"activity\": \"Learn the NATO phonetic alphabet\", \"type\": \"education\", \"participants\": 1, \"price\": 0, \"link\": \"https://en.wikipedia.org/wiki/NATO_phonetic_alphabet\", \"key\": \"6706598\", \"accessibility\": 0 } And this response can be mapped to a simple data class: @Serializable data class Activity( val activity: String, val type: String, val participants: Int, val price: Double, val link: String, val key: String, val accessibility: Double ) And this data class is placed inside the shared KMP module. ","date":"10 Dec 2020","objectID":"/posts/2020/kotlin-serialization-alamofire/:1:0","tags":null,"title":"Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform","uri":"/posts/2020/kotlin-serialization-alamofire/"},{"categories":null,"content":"Android Now, let’s move to the Android side and I start with Android because things are simpler. In fact, you can use Retrofit and the Kotlin Serialization Converter. All you need to do is add the Converter Factory for the Kotlin Serialization. Retrofit.Builder() .baseUrl(\"https://www.boredapi.com/api/\") .addConverterFactory(Json.asConverterFactory(MediaType.get(\"application/json\"))) .build() .create(ActivityApiService::class.java) ","date":"10 Dec 2020","objectID":"/posts/2020/kotlin-serialization-alamofire/:2:0","tags":null,"title":"Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform","uri":"/posts/2020/kotlin-serialization-alamofire/"},{"categories":null,"content":"iOs On iOs the equivalent to Retrofit is Alamofire. Alamofire let you easily handle the deserialization of the responses (and of course also the serialization of the requests) with the Decodable protocol (and Encodable - or Codable to support both Encodable and Decodable at the same time). For more information about Codable, I suggest you to look at the official documentation. But unfortunately there is no Codable support on Kotlin/Native (maybe it will come with direct interoperability with Swift - Kotlin Roadmap). ","date":"10 Dec 2020","objectID":"/posts/2020/kotlin-serialization-alamofire/:3:0","tags":null,"title":"Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform","uri":"/posts/2020/kotlin-serialization-alamofire/"},{"categories":null,"content":"Custom Response Deserialization with Alamofire Fortunately, Alamofire gives the possibility to write a custom response serializer. The starting point is a struct that extends ResponseSerializer; this struct overrides the serialize method, which “does some magics” and returns the desired deserialized object, represented by the generic T. struct CustomSerializer\u003cT\u003e: ResponseSerializer { func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -\u003e T { // TODO } } Before performing the object deserialization, a string representation of the response must be computed. To do that, I will use the StringResponseSerializer provided by Alamofire. let jsonString = try StringResponseSerializer().serialize(request: request, response: response, data: data, error: error) And then, this string will be sent to a Kotlin helper function that performs the actual deserialization. val deserializedObject = JsonDecoder().decodeFromString(jsonString: “{}”) And at the end, the custom Alamofire deserializer will look something like this (with also a bit of error handling): import Alamofire import shared struct CustomSerializer\u003cT\u003e: ResponseSerializer { func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -\u003e T { guard error == nil else { throw error! } guard let data = data, !data.isEmpty else { guard emptyResponseAllowed(forRequest: request, response: response) else { throw AFError.responseSerializationFailed(reason: .inputDataNilOrZeroLength) } guard let emptyResponseType = T.self as? EmptyResponse.Type, let emptyValue = emptyResponseType.emptyValue() as? T else { throw AFError.responseSerializationFailed(reason: .invalidEmptyResponse(type: \"\\(T.self)\")) } return emptyValue } do { let jsonString = try StringResponseSerializer().serialize(request: request, response: response, data: data, error: error) val deserializedObject = JsonDecoder().decodeFromString(jsonString: “{}”) return deserializedObject } catch { throw AFError.responseSerializationFailed(reason: .decodingFailed(error: error)) } } } And then, the ViewModel can make the network request using the custom serializer. AF.request(\"https://www.boredapi.com/api/activity\") .response(responseSerializer: CustomSerializer\u003cActivity\u003e()) { response in if let activity = response.value { DispatchQueue.main.async { self.showLoading = false self.activityName = activity.activity } } } ","date":"10 Dec 2020","objectID":"/posts/2020/kotlin-serialization-alamofire/:3:1","tags":null,"title":"Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform","uri":"/posts/2020/kotlin-serialization-alamofire/"},{"categories":null,"content":"Deserialization on Kotlin/Native Now let’s move back to KMP, and let’s implement the decodeFromString function mentioned above. The first thing that popped into my mind is to use an inline reified function that works with generics (for more info about inline functions and reified parameters, give a look to the Kotlin documentation). object JsonDecoder { @Throws(Exception::class) inline fun \u003creified T\u003e decodeFromString(jsonString: String): T { return Json.decodeFromString(jsonString) } } But unfortunately, this approach does not work because Swift doesn’t have inline functions support. { KotlinException = \"kotlin.IllegalStateException: unsupported call of reified inlined function `com.prof18.sharedserialization.shared.JsonDecoder.decodeFromString`\"; KotlinExceptionOrigin = \"\"; NSLocalizedDescription = \"unsupported call of reified inlined function com.prof18.sharedserialization.shared.JsonDecoder.decodeFromString`\"; } So, after a bit of exploring of the Kotlin Serialization documentation and sources, I’ve discovered that there is the possibility to get the serializer of a KClass (KClass\u003cT\u003e.serializer()) and then pass it to the decodeFromString function. object JsonDecoder { @InternalSerializationApi fun decodeFromString(jsonString: String, objCClass: ObjCClass): Any { val kClazz = getOriginalKotlinClass(objCClass)!! val serializer = kClazz.serializer() return Json.decodeFromString(serializer, jsonString) } } This approach works! But unfortunately, the KClass\u003cT\u003e.serializer() is an internal API. And (as stated in the documentation) it doesn’t work with generic classes, lists, custom serializers, etc (I’ve opened an issue on GitHub just to be sure). So, given the limitations of using an internal API, I’ve decided to change (again!) approach. Since it is hard to create generic deserialization, it is better to specify the deserialization information for every DTO. To do that, I have defined an abstract class with an abstract deserialize method that every DTOs has to implement. abstract class BaseResponseDTO { @Throws(Exception::class) abstract fun deserialize(jsonString: String): BaseResponseDTO } So, the Activity class defined above need to override the deserialize method. @Serializable data class Activity( ... ) : BaseResponseDTO() { override fun deserialize(jsonString: String): Activity { val activity: Activity = Json.decodeFromString(jsonString) activity.freeze() return activity } } Now, some modifications must be made to the custom Alamofire deserializer. First of all, the accepted generic type is not T only, but T that inherits from BaseResponseDTO struct CustomSerializer\u003cT: BaseResponseDTO\u003e: ResponseSerializer { func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -\u003e T { ... } } In this way, we can retrieve the serializer from the abstract class, deserialize the object and return it. let deserializedObject = try T().deserialize(jsonString: jsonString) as! T And finally, this works! Here’s the full code of the updated serializer. import Alamofire import shared struct CustomSerializer\u003cT: BaseResponseDTO\u003e: ResponseSerializer { func serialize(request: URLRequest?, response: HTTPURLResponse?, data: Data?, error: Error?) throws -\u003e T { guard error == nil else { throw error! } guard let data = data, !data.isEmpty else { guard emptyResponseAllowed(forRequest: request, response: response) else { throw AFError.responseSerializationFailed(reason: .inputDataNilOrZeroLength) } guard let emptyResponseType = T.self as? EmptyResponse.Type, let emptyValue = emptyResponseType.emptyValue() as? T else { throw AFError.responseSerializationFailed(reason: .invalidEmptyResponse(type: \"\\(T.self)\")) } return emptyValue } do { let jsonString = try StringResponseSerializer().serialize(request: request, response: response, data: data, error: error) let deserializedObject = try T().deserialize(jsonString: jsonString) as! T deserializedObject.makeFrozen() return deserializedObject } catch { throw AFError.respons","date":"10 Dec 2020","objectID":"/posts/2020/kotlin-serialization-alamofire/:3:2","tags":null,"title":"Using Retrofit and Alamofire with Kotlin Serialization on Kotlin Multiplatform","uri":"/posts/2020/kotlin-serialization-alamofire/"},{"categories":null,"content":"14-15 December 2020 - Droidcon APAC ","date":"6 Dec 2020","objectID":"/talks/2020/remote-is-here-droidcon-apac/:0:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-droidcon-apac/"},{"categories":null,"content":"Abstract: Remote is finally here, and it’s going to stay. In this talk, Marco and Gian will go through what it means to work remotely for a startup – from both a developer and a manager point of view. They’ll share some tips and tricks on how to stay organized and focused, how to manage deadlines and the team organization, how to take care of your mental health, and the pros and cons of hiring remotely. They both work for Uniwhere, a venture-backed startup that went remote-first more than two years ago and is now working with 4 different time-zones. Talk done together with Gianluca Segato. ","date":"6 Dec 2020","objectID":"/talks/2020/remote-is-here-droidcon-apac/:1:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-droidcon-apac/"},{"categories":null,"content":"Slide: ","date":"6 Dec 2020","objectID":"/talks/2020/remote-is-here-droidcon-apac/:2:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-droidcon-apac/"},{"categories":null,"content":"Interactive: .iframe-container { overflow: hidden; padding-top: 56.25%; position: relative; } .iframe-container iframe { border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%; } ","date":"6 Dec 2020","objectID":"/talks/2020/remote-is-here-droidcon-apac/:2:1","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-droidcon-apac/"},{"categories":null,"content":"Static: ","date":"6 Dec 2020","objectID":"/talks/2020/remote-is-here-droidcon-apac/:2:2","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-droidcon-apac/"},{"categories":null,"content":"Video: ","date":"6 Dec 2020","objectID":"/talks/2020/remote-is-here-droidcon-apac/:3:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-droidcon-apac/"},{"categories":null,"content":"26 November 2020 - Marca User Group ","date":"26 Nov 2020","objectID":"/talks/2020/hi-met-kmp-mug/:0:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2020/hi-met-kmp-mug/"},{"categories":null,"content":"Abstract: Kotlin Multiplatform is getting more and more hype every day, even if it’s still in alpha. We constantly read of new companies and teams that are trying KMP for experiments and production projects alike. And we’re left wondering: it safe to do so? Why picking KMP over any another cross-platform solution? How to approach it? And, most importantly, is it possible to start using it in existing projects? In this talk, I’ll answer to these questions, clarifying all the doubts and making you ready to use and love Kotlin Multiplatform. ","date":"26 Nov 2020","objectID":"/talks/2020/hi-met-kmp-mug/:1:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2020/hi-met-kmp-mug/"},{"categories":null,"content":"Slide: ","date":"26 Nov 2020","objectID":"/talks/2020/hi-met-kmp-mug/:2:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2020/hi-met-kmp-mug/"},{"categories":null,"content":"Video: ","date":"26 Nov 2020","objectID":"/talks/2020/hi-met-kmp-mug/:3:0","tags":null,"title":"Hi, have you met Kotlin Multiplatform","uri":"/talks/2020/hi-met-kmp-mug/"},{"categories":null,"content":" Recently, I’ve started to work on (yet another) side project: Money Flow. As the name suggests, this is an application to help me track all the expenses and incomes. I’ve thought and designed it almost a year ago but only now I’ve found the time to start writing actual code. A first design iteration, that will change a bit I’ve decided to make this project a personal playground for a Kotlin Multiplatform mobile app. Money Flow will be an Android, iOS and MacOS application with a common business logic written in Kotlin. I’ve decided to use the new declarative way to handle UI: Jetpack Compose for Android (still in alpha at the time I’m writing this article) and SwiftUI for iOS/MacOS (that is officially stable, but still causes some headaches in big projects — I’ll probably write about my experience soon). So, after setting up the project, I started thinking about the architecture of the Home Screen. This article will be a sort of journal that describes all the decisions and the thoughts that I’ve made to come up with a solution that satisfies me. In this way, I want to be helpful to all the people that are in this decision process. In the first place, I’ve thought to go with an MVVM approach, with a platform-specific ViewModel defined in the native part. But I wanted to share as much code as possible so I’ve decided to switch to an MVP architecture with Model, (abstract) View and Presenter all defined in the common code. The Model is a sealed class that contains the different states: a loading state, an error state and a “success state” with all the info needed to render the HomeScreen. sealed class HomeModel { object Loading: HomeModel() data class Error(val message: String): HomeModel() data class HomeState(val balanceRecap: BalanceRecap, val latestTransactions: List\u003cTransaction\u003e): HomeModel() } data class BalanceRecap( val totalBalance: Int, val monthlyIncome: Int, val monthlyExpenses: Int ) data class Transaction( val id: String, val title: String, val amount: Int, val type: TransactionType, val formattedDate: String ) enum class TransactionType { INCOME, EXPENSE } The View is pretty basic, with just a method that receives the data and renders it: interface HomeView { fun presentData(homeModel: HomeModel) } And finally, the Presenter that instead is a little bit more complicated: class HomePresenter( private val moneyRepository: MoneyRepository, // A default state only for iOS private val coroutineScope: CoroutineScope = MainScope() ) : BasePresenter\u003cHomeView\u003e() { override fun onViewAttached(view: HomeView) { super.onViewAttached(view) computeHomeData() } internal fun computeHomeData(view: HomeView) { val latestTransactionFlow = moneyRepository.getLatestTransactions() val balanceRecapFlow = moneyRepository.getBalanceRecap() coroutineScope.launch { latestTransactionFlow.combine(balanceRecapFlow) { transactions: List\u003cTransaction\u003e, balanceRecap: BalanceRecap -\u003e HomeModel.HomeState( balanceRecap = balanceRecap, latestTransactions = transactions ) }.collect { homeModel -\u003e view.presentData(it) } } } override fun onViewDetached() { super.onViewDetached() coroutineScope.cancel() } } The presenter receives in the constructor the dependencies that it needs plus a CoroutineScope that for Android is provided by the native side. On iOS, instead, the scope is initialized by default (because we can’t define a scope from Swift code). A CoroutineScope is necessary because the data come from the repository as Flow (here for more info about Kotlin Flow) and any ongoing operation has to be canceled when the view is destroyed. Then, I moved to the Android side to develop the HomeScreen: class MainActivity : AppCompatActivity(), HomeView { private val presenter by scoped { HomePresenter(MoneyRepositoryFake()) } override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) presenter.attachView(this) setContent { MoneyFlowTheme { HomeScreen() } } } override fun onDestroy() { presenter.detachView() super.onDestroy() } ove","date":"23 Oct 2020","objectID":"/posts/2020/kmm-shared-app-architecture/:0:0","tags":null,"title":"Choosing the right architecture for a [new] Kotlin Multiplatform, Jetpack Compose and SwiftUI app","uri":"/posts/2020/kmm-shared-app-architecture/"},{"categories":null,"content":"16-17 November 2020 - droidcon Americas ","date":"21 Oct 2020","objectID":"/talks/2020/tips-modularization-droidcon-america/:0:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-droidcon-america/"},{"categories":null,"content":"Abstract: Nowadays, App modularization is a technique largely adopted that gives lots of advantages. But how to approach it? This talk will not focus on the pro and cons of modularization but instead on the approach and the process to achieve it. In particular, I want to share the approach that I followed to modularize an existing application and a new one. I want also to share the failures and all the struggles that came in my head while approaching the process. ","date":"21 Oct 2020","objectID":"/talks/2020/tips-modularization-droidcon-america/:1:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-droidcon-america/"},{"categories":null,"content":"Slide: ","date":"21 Oct 2020","objectID":"/talks/2020/tips-modularization-droidcon-america/:2:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-droidcon-america/"},{"categories":null,"content":"Example Project: https://github.com/prof18/Filmatic ","date":"21 Oct 2020","objectID":"/talks/2020/tips-modularization-droidcon-america/:3:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-droidcon-america/"},{"categories":null,"content":"Video: ","date":"21 Oct 2020","objectID":"/talks/2020/tips-modularization-droidcon-america/:4:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-droidcon-america/"},{"categories":null,"content":"12 November 2020 - AppDevCon ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-appdevcon/:0:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-appdevcon/"},{"categories":null,"content":"Abstract: Nowadays, the mobile world has started to see larger adoption of the declarative style to build UI as opposed to the (not so) old imperative style. This pattern is borrowed from the web world, from frameworks like React and Vue.js and it started to appear in the mobile world first with React Native, then with Flutter and finally, it captured the attention of the “native world” with Jetpack Compose and Swift UI. In this talk, we will explore the declarative style of building UI compared with the imperative one. We will try to enter in this mindset by finding the differences and by looking at some examples of these patterns. ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-appdevcon/:1:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-appdevcon/"},{"categories":null,"content":"Slide: ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-appdevcon/:2:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-appdevcon/"},{"categories":null,"content":"Sample Project: https://github.com/prof18/imperative-vs-declarative ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-appdevcon/:3:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-appdevcon/"},{"categories":null,"content":"Video: ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-appdevcon/:4:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-appdevcon/"},{"categories":null,"content":"17-18 October 2020 - DevFest Italia ","date":"7 Oct 2020","objectID":"/talks/2020/remote-is-here-devfest-ita/:0:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-devfest-ita/"},{"categories":null,"content":"Abstract: Remote is finally here, and it’s going to stay. In this talk, Marco and Gian will go through what it means to work remotely for a startup – from both a developer and a manager point of view. They’ll share some tips and tricks on how to stay organized and focused, how to manage deadlines and the team organization, how to take care of your mental health, and the pros and cons of hiring remotely. They both work for Uniwhere, a venture-backed startup that went remote-first more than two years ago and is now working with 4 different time-zones. Talk done together with Gianluca Segato. ","date":"7 Oct 2020","objectID":"/talks/2020/remote-is-here-devfest-ita/:1:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-devfest-ita/"},{"categories":null,"content":"Slides: ","date":"7 Oct 2020","objectID":"/talks/2020/remote-is-here-devfest-ita/:2:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-devfest-ita/"},{"categories":null,"content":"Interactive: .iframe-container { overflow: hidden; padding-top: 56.25%; position: relative; } .iframe-container iframe { border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%; } ","date":"7 Oct 2020","objectID":"/talks/2020/remote-is-here-devfest-ita/:2:1","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-devfest-ita/"},{"categories":null,"content":"Static: ","date":"7 Oct 2020","objectID":"/talks/2020/remote-is-here-devfest-ita/:2:2","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-devfest-ita/"},{"categories":null,"content":"Video: ","date":"7 Oct 2020","objectID":"/talks/2020/remote-is-here-devfest-ita/:3:0","tags":null,"title":"Remote is here. Now what?","uri":"/talks/2020/remote-is-here-devfest-ita/"},{"categories":null,"content":"14 October 2020 - S.T.A.Y. Home #4 ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-stayhome4/:0:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-stayhome4/"},{"categories":null,"content":"Abstract: Nowadays, the mobile world has started to see larger adoption of the declarative style to build UI as opposed to the (not so) old imperative style. This pattern is borrowed from the web world, from frameworks like React and Vue.js and it started to appear in the mobile world first with React Native, then with Flutter and finally, it captured the attention of the “native world” with Jetpack Compose and Swift UI. In this talk, we will explore the declarative style of building UI compared with the imperative one. We will try to enter in this mindset by finding the differences and by looking at some examples of these patterns. ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-stayhome4/:1:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-stayhome4/"},{"categories":null,"content":"Slide: ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-stayhome4/:2:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-stayhome4/"},{"categories":null,"content":"Sample Project: https://github.com/prof18/imperative-vs-declarative ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-stayhome4/:3:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-stayhome4/"},{"categories":null,"content":"Video: ","date":"7 Oct 2020","objectID":"/talks/2020/imperative-vs-declarative-stayhome4/:4:0","tags":null,"title":"Imperative is dead, long live Declarative!","uri":"/talks/2020/imperative-vs-declarative-stayhome4/"},{"categories":null,"content":"8-9 October 2020 - droidcon EMEA ","date":"17 Sep 2020","objectID":"/talks/2020/shared-code-kmp-droidcon-emea/:0:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2020/shared-code-kmp-droidcon-emea/"},{"categories":null,"content":"Abstract: Kotlin Multiplatform is an experimental feature that you can use to share code between different platforms. Even if it is an experimental feature, it is already possible to start using it in production applications. In this talk, I will share the discussion that led us to Kotlin Multiplatform, and the following processes we put in place to start using it in production for an Android, iOS, and backend project. I will show you what parts of the code you can (gradually) start to share and how to integrate with existing standalone projects. ","date":"17 Sep 2020","objectID":"/talks/2020/shared-code-kmp-droidcon-emea/:1:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2020/shared-code-kmp-droidcon-emea/"},{"categories":null,"content":"Slide: ","date":"17 Sep 2020","objectID":"/talks/2020/shared-code-kmp-droidcon-emea/:2:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2020/shared-code-kmp-droidcon-emea/"},{"categories":null,"content":"Sample Code: https://github.com/prof18/shared-hn-android-ios-backend/tree/with-ios-fatframework ","date":"17 Sep 2020","objectID":"/talks/2020/shared-code-kmp-droidcon-emea/:3:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2020/shared-code-kmp-droidcon-emea/"},{"categories":null,"content":"Video: ","date":"17 Sep 2020","objectID":"/talks/2020/shared-code-kmp-droidcon-emea/:4:0","tags":null,"title":"And that, folks, is how we shared code between Android, iOS and the Backend","uri":"/talks/2020/shared-code-kmp-droidcon-emea/"},{"categories":null,"content":"During my journey as a mobile developer, I had the chance to try and give a look at some cross-platform solutions both for work and fun reasons. Today, I want to share my thoughts and considerations about them and why/when you should use cross-platform. I hope that these thoughts will be helpful to anyone that is in the process of choosing the right solution for their product. Disclaimer: in this article, I will share some opinions based on my experience and they can apply to your situation or not. If you want to share your considerations, feel free to reach me out on Twitter @marcoGomier. ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:0:0","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"Possible solutions Out in the wild, there are plenty of different cross-platform solutions. However, in this post, I will focus only on the most used (that are also ones that provide an experience as much close as the native one) and the most promising. Google Trends for the past 12 months. Last update July 2020 First of all, I’ve excluded all the solutions that use web technologies to render the app in a WebView (like Cordova or Ionic) because they don’t have adequate performances (And I haven’t used them for this reason). The solutions on which I will focus are: React Native, Flutter, and Kotlin Multiplatform. (yes, there is also Xamarin but I never used it and it seems not so appealing in the community). ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:1:0","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"React Native I’ve used React Native in a production brownfield (a yet existing app with some feature developed with React Native. More info about brownfield: Wikipedia) app (Uniwhere and we ditched it for performance reasons). I don’t like it because I don’t like Javascript and I prefer statically typed languages (yes I could use Typescript, but I prefer a nominative type system rather than a structural one). ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:1:1","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"Flutter: I’ve used Flutter in both pet projects (Friends Tournament) and production apps. Flutter has better performances with complex layouts and UIs (For a complete comparison between Flutter and React Native, you can look to the series of articles that I’ve written) and uses Dart as language. Dart is a strongly typed language but the type can also be inferred. In just two words, I can say that Dart is a mixture of Javascript and an Object-Oriented language. So (as you may guess), if I have to choose between Flutter and React Native I will choose Flutter. ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:1:2","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"Kotlin Multiplatform I’ve used Kotlin Multiplatform in both pet projects (not yet released) and production app (Uniwhere). Even if it is an experimental feature, it is stable enough to be used in production applications. Kotlin Multiplatform has a completely different approach to code sharing with respect to React Native and Flutter. Later on, I will explain why, but for the time being, all you need to know is that, with Kotlin Multiplatform, you will not share between the platform all the code but only some parts (for example the business logic, the network layer, the persistence layer, etc.) ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:1:3","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"Issue with cross-platform solutions The real bottleneck of every cross-platform framework is the UI code. Every solution tries to unify the UI declaration between two (or more) platforms that works differently under the hood. React Native uses a “bridge” to create a connection between the native part of the application and the Javascript one, so it can be possible to call native code from the javascript part of the application and vice-versa. In this way, a React Component (for example a \u003cText\u003e) will be mapped to a native component (a TextView on Android and UILabel on iOs). Flutter instead draws the widgets by itself on a canvas, using Skia (an open-source 2D graphic library managed by Google and used by Chrome, Chrome OS, Android, Firefox, and many others). For a comparison of how Flutter and React Native works, you can look to the third episode of the comparison series. These approaches (of course) has pros and cons. With the “React Native solution”, the pro is that the framework is transparent to OS changes: if Google or Apple decides to tweak the appearance of an existential widget, everything will work (or better, should) without any changes. The con instead is that there will be some delay due to the bridge initialization and the runtime translation needed to enable the communication between the Javascript part and the native one (you’ll notice it with complex layouts). With Flutter instead, everything is faster because there is not the time for the translation and the widgets are drawn in a canvas by Skia. The con is that the widgets are not the system one. Visually are the same but they are not the same. And if there will be new native widgets from Google and Apple we have to wait that the Flutter team adds them. And that’s why Kotlin Multiplatform is interesting. As stated in the documentation: “multiplatform is not about compiling all code for all platforms” In fact, every platform has its uniqueness, different behaviors and it’s very difficult to find a common pattern that “unifies the differences”. So the solution that Kotlin Multiplatform provides is the possibility to share some part of the code, for example, the business logic, the data persistence layer, the network layer, etc. tl;dr; share as much [NO UI] code as possible. But, if you need to access platform-specific code (and it happens in the business logic, for example, the SQL driver), you can use the expected/actual mechanism. In this way, a common module can define expected declarations, and a platform module can provide actual declarations corresponding to the expected ones. So, since the solution to the cross-platform problem is not to share UI code, do I need to ditch solutions like React Native and Flutter? ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:2:0","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"What to use now? Well Well, no. Every solution can be used and it’s useful in different situations. For example, for a short span application, i.e. an app for a conference, for a concert, a festival, an event, etc., using a cross-platform solution like Flutter or React Native is a good idea. In fact, you need to develop in a (usually) short time an app that will be used by the attendees that use different platforms for a limited amount of time. When you need a short time to market and maintenance/longevity are not important, go cross-platform Another example is when you have an idea and you want to validate it in the market (aka doing an MVP - Minimum Viable Product). In this stage, velocity is the key: you need to prove as fast as you can that your idea fits in the market. So, going with a cross-platform solution is a good idea because you avoid wasting time and resources in developing for two different platforms. Of course, this is applicable if you want to cover all the platforms. If you have an idea iOS only, going cross-platform is no-sense. If you are developing an MVP, go cross-platform After a successful MVP stage, you found yourself with a proven idea and you need to build a product that can scale. So, you need a proper structure, scalable, testable, and easily maintainable. And inevitable at this point you will have some tech debt for the rush and quick decision taken during the MVP phase. Potentially you’ll need to rewrite the two clients with a native solution, without “hacky” solutions because after proving that “it can work”, you have to prove that “it can scale”. (For a deeper analysis about tech choices in an early-stage startup, look to the article written by my friend Gian.) Switch to native if you have issues on scaling In this situation, Kotlin Multiplatform can be really useful. With two native applications, with platform-specific UI code, sharing the common business logic code is a good solution. In fact, you can write it one and test it once without any dependencies from the native platform. ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:3:0","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"The perfect recipe? Unfortunately, there isn’t a perfect recipe. Every project has its peculiar characteristics and could be very hard to find the perfect solution. One project can work perfectly with a cross-platform solution while another can be a big big pain. Choosing the right technology is part of the game. An important point to keep in mind is that if the experience with a particular choice is not successful as expected, you must have the consciousness to admit the defeat and try another solution (I know, it’s not easy). I hope that by sharing my experience, I will help you to make a great decision. If you want to share your considerations, feel free to reach me out on Twitter @marcoGomier. ","date":"4 Aug 2020","objectID":"/posts/2020/my-2cents-cross-platform/:4:0","tags":null,"title":"My 2 Cents about cross-platform","uri":"/posts/2020/my-2cents-cross-platform/"},{"categories":null,"content":"Last week my parents asked me to download to their phones a simple QR Reader. So I opened the Play Store and I started to search an easy to use application, without lot’s of noise (oh, I mean intrusive ads..) and without ulterior motives. Well, I wandered around the Play Store for an hour without finding an answer. Some apps will require all the imaginable permission only to scan a QR code. Come on, why do you need my contacts and my location for the scanning? 🤬 Some other apps instead showed too much aggressive ads strategy that makes confusion to people no tech-addicted. So, I decided to spend my weekend developing a simple, secure, and privacy-focused QR Reader. The app is very simple because its aim it’s very simple: “Open the camera, scan the QR and get a link!”. It does not require sneaky, strange, and useless permissions just for the sake of stealing data. There aren’t ads, trackers of any sort and what do you scan remains on your phone. The only requested permission is for the camera. ","date":"28 Jul 2020","objectID":"/posts/2020/qr-reader-secure-release/:0:0","tags":null,"title":"QR Reader Secure - Privacy-Focused and Secure QR Reader","uri":"/posts/2020/qr-reader-secure-release/"},{"categories":null,"content":"Download QR Reader Secure is available for free in the Play Store and it’s open source, so you can inspect the code by yourself on GitHub I hope that this little application will be helpful to keep your data more secure. If you have any feedback, if you notice a bug or if you want to contribute for example with the translation, feel free to reach me out on Twitter @marcoGomier. ","date":"28 Jul 2020","objectID":"/posts/2020/qr-reader-secure-release/:1:0","tags":null,"title":"QR Reader Secure - Privacy-Focused and Secure QR Reader","uri":"/posts/2020/qr-reader-secure-release/"},{"categories":null,"content":"Today I want to share Friends Tournament, a side project that I have been working on for the past year during my spare time. Friends Tournament is a simple application that will help you to manage and organize tournaments with your friends. You can use it to generate videogames tournament, sports tournament, board games tournament, whatever type of tournament do you want. All you need to do is to provide the number of players, the number of matches and the numbers of player that can play at the same time. That’s all! Friends Tournament will then generate the matches and the rounds for you. You can then keep the score of each player and a leaderboard will be generated automatically. ","date":"12 Jun 2020","objectID":"/posts/2020/friends-tournament-release/:0:0","tags":null,"title":"Friends Tournament - Tournament creation and management made easy","uri":"/posts/2020/friends-tournament-release/"},{"categories":null,"content":"Why During last summer my friends and I organized a tournament of Crash Team Racing. So we started to set up the different matches and to organize the rounds by randomly extracting the name of the players. It was a boring job that ended with a big chart on paper: So, how I can speed things up?… Well, let’s make an app! And that’s why I decided to build Friends Tournament. ","date":"12 Jun 2020","objectID":"/posts/2020/friends-tournament-release/:1:0","tags":null,"title":"Friends Tournament - Tournament creation and management made easy","uri":"/posts/2020/friends-tournament-release/"},{"categories":null,"content":"Tech Stack For this application, I decided to go with Flutter so I managed to test how things works with a complex project. And I can say that, as native mobile engineer, I’m satisfied with the result. Spoiler alert: I’ll share my 2cents about cross-platform solutions in a future article, so make sure to follow me if you are interested! For the business logic, I decided to go with the Bloc pattern because I really like it! If you are interested about the structure of the project, you can give a look to the code because Friends Tournament is open source and its available on GitHub. ","date":"12 Jun 2020","objectID":"/posts/2020/friends-tournament-release/:2:0","tags":null,"title":"Friends Tournament - Tournament creation and management made easy","uri":"/posts/2020/friends-tournament-release/"},{"categories":null,"content":"Download For the time being, Friends Tournament is only available for Android. Maybe in the future I’ll release the iOs version too. If you have any feedback, if you notice a bug or if you want to contribute for example with the translation, feel free to reach me out on Twitter @marcoGomier. ","date":"12 Jun 2020","objectID":"/posts/2020/friends-tournament-release/:3:0","tags":null,"title":"Friends Tournament - Tournament creation and management made easy","uri":"/posts/2020/friends-tournament-release/"},{"categories":null,"content":"Which framework should I use? How to build UIs? How do things work under the hood? These are the types of questions that I’ve answered during the series of articles about Flutter and React Native. Some time ago I started learning Flutter for fun reasons and at the same time, I (had to) started learning React Native for work reasons. While learning and using them, I started to see some differences and some common concepts between them. So I decided to share my findings with a talk in both local meetups and international conferences (If you are curious there is a talk section in the website). From this talk, I’ve extracted a series of articles and here we are! In the first episode, I’ll introduce the two frameworks with a historical overview and an analysis of the languages that they use. Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1)i In the second episode, I’ll start to dive into the two frameworks, by understanding how to build user interfaces. We will see that many concepts are very similar in both Flutter and React Native. The post will not cover every deep aspect and secrets of UI building, to avoid a long and boring reading. The aim is to give you an overview of the differences and the common concepts and for more details, I always suggest to give a look to the official documentation (React Native - Flutter), that I have to say, it’s very well written and detailed. Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2) The third episode is the most fascinating (at least for me, because I like to understand how things work) because I’ll go deeper under the hoods to understand how the two framework works. Moreover, I’ll also describe three common interesting features that Flutter and React Native shares. Also in this post, my aim is to introduce and explain then main concepts; if you are interested in more details (I understand you!) there will be some reference to follow. Flutter or React Native, a cross-platform dilemma - How they work - (Part 3) And finally, in the last episode, I’ll wrap things up. First I’ll make a consideration about cross-platform in general and then I’ll try to help you to choose the right framework for you. And there is also a bonus! (The intro of this post contains a spoiler about the bonus!) Flutter or React Native, a cross-platform dilemma - How to chose + Bonus - (Part 4) As you will read, this is not an easy choice. I think that it all depends on the product that you are going to develop, on your personal taste about programming languages and on the composition of your team. For example, Flutter is preferable for an app with fancy UIs with lots of animations and complex layouts. Maybe you don’t like Javascript at all (like me) or you have a majority of web dev in your team. That’s why I like to say that going cross-platform it’s a choice with compromises based on specific situations. I hope that this series will be helpful to make the right decision. If you want to share your consideration and what led you to choose between Flutter and React Native, feel free to reach me out on Twitter @marcoGomier. ","date":"10 May 2020","objectID":"/posts/2020/rn-flutter-dilemma-series/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - Serie wrap-up","uri":"/posts/2020/rn-flutter-dilemma-series/"},{"categories":null,"content":"2 April 2020 - GDG Venezia Remote Meetup ","date":"3 Apr 2020","objectID":"/talks/2020/programmatori-anonimi-covid-19/:0:0","tags":null,"title":"Programmatori anonimi ai tempi di Covid-19","uri":"/talks/2020/programmatori-anonimi-covid-19/"},{"categories":null,"content":"Abstract: How to get organized to be productive in a remote environment? How to manage communications, deadlines, tasks, etc.? How to balance private life and work activity? Talk done together with Gianluca Segato. ","date":"3 Apr 2020","objectID":"/talks/2020/programmatori-anonimi-covid-19/:1:0","tags":null,"title":"Programmatori anonimi ai tempi di Covid-19","uri":"/talks/2020/programmatori-anonimi-covid-19/"},{"categories":null,"content":"Slide: ","date":"3 Apr 2020","objectID":"/talks/2020/programmatori-anonimi-covid-19/:2:0","tags":null,"title":"Programmatori anonimi ai tempi di Covid-19","uri":"/talks/2020/programmatori-anonimi-covid-19/"},{"categories":null,"content":"Video: ","date":"3 Apr 2020","objectID":"/talks/2020/programmatori-anonimi-covid-19/:3:0","tags":null,"title":"Programmatori anonimi ai tempi di Covid-19","uri":"/talks/2020/programmatori-anonimi-covid-19/"},{"categories":null,"content":"Welcome to the fourth and last part of this article series about React Native and Flutter. In the first episode, we have introduced the two frameworks with some history and with a comparison between the languages that they use. In the second episode, we have talked about User Interfaces and how to build them. In the third episode, we went deeper under the hood to understand how things work. And now it’s time to wrap things up by trying to understand how to choose the right framework for you. But before moving on, a quick consideration about cross-platform is necessary. Cross-platform in general is not bad, but it is not absolutely better than native development. Going cross-platform it’s a choice with compromises based on specific situations. For example, you are a web-first company that wants to provide a mobile app or you have constraints in your team or you want to try a new feature that you are not sure if it is going to be successful. Cross-platform can be really useful for example for the event’s/conference’s applications, i.e. for applications that have a short life span. And finally, another useful situation for using cross-platform is when you have to validate a new idea, where time to market is everything and you should not spend lots of time for covering all the platforms. If you are interested in some tips on how to choose the best stack for an MVP, give a look to this article of my friend Gian Segato. The most important thing to keep in mind is that if the troubles of using a cross-platform solution became higher than benefits, you should take a step back, like Airbnb did some time ago. I know, it will not be an easy step but if things are not working as expected it could be the only viable solution. But should I choose Flutter or React Native? Well, there isn’t a correct answer valid for everyone. I think that if your application will have complex and very custom layouts, long lists with complex layouts you should go with Flutter because it is more performant than React Native. Instead, if you want to incorporate a cross-platform feature inside an existent native application (the Frankenstein feature that we have discussed in the third episode of the series) you should choose React Native because it is more stable (Note: I compared this feature in the application of the company where I work during summer 2019 - things may be changed). Furthermore, I think that another reason to choose Flutter is that Dart is a language thought and developed also for mobile while Javascript is not. But of course, this is a personal thought, if you are more familiar with Javascript, go with it! And that’s all for this comparison between Flutter and React Native. I hope that these articles will be helpful to make the right decision. If you want to share your consideration and what led you to choose between the two frameworks, feel free to reach me out on Twitter @marcoGomier. ","date":"23 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-4-how-choose/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to chose + Bonus - (Part 4)","uri":"/posts/2020/rn-flutter-dilemma-4-how-choose/"},{"categories":null,"content":"BONUS Yes, there is a bonus for you. This series of articles have been extrapolated from a talk that I give out during 2019 to both local meetups and international conferences (for more info about my talks, visit the talks section of the website). Here’s the video and the slides of the talk: ","date":"23 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-4-how-choose/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to chose + Bonus - (Part 4)","uri":"/posts/2020/rn-flutter-dilemma-4-how-choose/"},{"categories":null,"content":"Slide: Flutter or React Native, a cross-platform dilemma | DevFest Veneto 19 ","date":"23 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-4-how-choose/:1:1","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to chose + Bonus - (Part 4)","uri":"/posts/2020/rn-flutter-dilemma-4-how-choose/"},{"categories":null,"content":"Video: ","date":"23 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-4-how-choose/:1:2","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to chose + Bonus - (Part 4)","uri":"/posts/2020/rn-flutter-dilemma-4-how-choose/"},{"categories":null,"content":"Welcome to the third part of this article series about React Native and Flutter. In the latest episode, we have talked about User Interfaces and how to build them in the two frameworks. In this article, we’ll go deeper under the hoods to understand how things work. But I will not go deeper with lot’s of details and implementation things, because I want to make you understand how the thing works at a high level. If you are interested to go deeper, I will leave across the article some links for further information. But, before moving on, I suggest you read the previous articles of the series if you have lost them. Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1) Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2) ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"React Native Let’s start by analyzing the internals of Rect Native. React Native has an internal infrastructure that is called “the Bridge” and that is built at runtime. The main purpose of the bridge is to create a connection between the native part of the application and the Javascript one, so it can be possible to call native code from the javascript part of the application and vice-versa. The communication between the two different parts is event-driven and in the following gif, you can see an example of that kind of communication. An example of communication between Native and Javascript Let’s analyze what happens here. Let’s suppose that we have opened our application. Then, the native code notifies to the bridge that the app has been opened and so the bridge generates a serialized payload that contains that information. This payload is sent to the Javascript code that decides what to do; for example, it decides to render the simple “Hello World” app that we showed in the latest episode. So again, the information is sent back to the bridge that serializes that information and it sends it back to the native code. At this time, the native code has received all the information that it needs to render the view of the application. These exchanges of information are performed in an asynchronous way: the messages are collected in a queue that is flushed every 5 ms by default to avoid too much message sending in a short period of time. Nevertheless, this message passing causes some delays especially with a complex layout or long list with complex items. In fact, the Facebook team is working on a new architecture (codename Fabric) to address this issue and let the UI update synchronously. In just two words, they will get rid of the bridge and the serialization and there will be a Javascript Interface to allow the communication between the Javascript part and the native one. For more information about Fabric I suggest you look to this talk: React Native’s New Architecture - Parashuram N - React Conf 2018 ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"Flutter Flutter instead works in a completely different way. In fact, all the widgets are managed and rendered using an engine (written in C++). In the figure below, you can see a representation of the Flutter Engine. Flutter Engine As you can see, there is a block called “Skia”. Skia is an open-source 2D graphic library managed by Google and you may already know about it, because it is used by Chrome, Chrome OS, Android, Firefox and many others. And in Flutter, Skia is responsible for rendering the widgets in a canvas. In this way, there isn’t a continuous communication between the “cross-platform technology” and the native part and everything is faster. Moreover, all the Dart code is compiled to native code to speed things up. be aware that the compilation to native code is performed only for production build and for this reason debug builds can be slower. ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"Comparison So, in React Native there is a correspondence between the components and the native widgets while Flutter includes its own widgets. This choice has pros and cons. Imagine that Apple and Google update the TextView with some flowers on the shape: an app developed with React Native will ( or better should ) show the flowers without any intervention while an app developed with Flutter won’t show it until the Flutter team will add it on their custom TextView. This is a con because we need to wait for another update if there are new things available on the native UI. The pro instead is that there isn’t any delay due to the bridge initialization and the runtime translation needed to enable the communication between the javascript part and the native one. ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:3:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"Common interesting features And finally, I want to conclude with some interesting features that both Flutter and React Native have. ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:4:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"Hot Reload The first one is “Hot Reload”, i.e. the capability of loading new changes without recompiling the entire application again. This feature is really really useful for example when you are trying different colors, font sizes, etc; waiting for an entire recompilation for these little changes it would be such a pain. In Flutter this feature is possible thanks to a combination of Ahead-of-time (AOT) and Just-in-time compilation. In fact, as mentioned earlier, Flutter generates machine code for production builds. For the debug builds instead, there is a virtual machine that can receive the new code, replace the old one and maintain the state. Here you can find more information about hot reload in Flutter. In React Native instead, the Hot Reload is built on top of Hot Module Replacement by Webpack. Basically there is a runtime included in the app that receives the new code and it replaces the old one. If you are interested in the details, I suggest you read this blog post from Facebook. ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:4:1","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"Update only components/widgets that have changed Both Flutter and React Native are declarative frameworks. This means that we define the current UI state (e.g. a loading state, an error state, etc.) and the framework manages the state changes. To achieve these, the framework creates an abstract representation of the UI and when the UI state has changed, it builds a new representation that it will be compared and to the previous one and only the differences will be rendered. To achieve these, React Native uses a Virtual DOM as UI representation (as you can see in the image below, basically a JSON file that contains all the information about the UI component). Virtual DOM Then the different DOMs are compared using reconciliation, a heuristic diff comparison algorithm. For more information about it, you can give a look to the React documentation. Flutter instead builds an Element Tree as a representation of the UI but instead, it does not use a tree-diffing algorithm to find the differences but instead, for each element of the UI the children list are examined independently. Flutter Element Tree For more information about it, you can give a look to the Flutter documentation. ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:5:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"“Frankenstein” App With Flutter and React Native, you can create a view, a screen or even an entire feature and then integrate it in an existing native application. This possibility can be really useful for example for very fast-evolving features or for an MVP feature that we are not so sure that it will be useful or even for a feature that will not be used so much. So it really depends on your situation but I can assure you that is not a crazy thing and maybe in the future, you could find yourself in this situation. With React Native, you have to use in your native application a view that will act as a container of the RN app and then you load the javascript bundle that you have previously generated with a kilometric command. react-native bundle \\ --verbose \\ --platform android \\ --dev false --entry-file index.js \\ --bundle-output your-project/app/src/main/assets/index.android.bundle \\ --assets-dest your-project/app/src/main/res \\ --sourcemap-output utils/android.main.bundle.map For more information, please visit the official documentation. Also in Flutter, you have to define a container view in your native application but instead, you don’t need to write a kilometric command to generate bundle: you just add the Flutter project directly from Android Studio and that’s it! ( for iOs there is more work to do: you have to add a Flutter SDK hook to the CocoaPods and to Xcode build phase ). Again, for more information, I suggest you read the official documentation And we have reached the end of this journey through the internals of Flutter and React Native. I understand that I went through lots of things in this article but I think that it’s necessary to know a little bit about how things work if you choose and work with these frameworks. In fact, the way how these frameworks work can affect your product. In the next (final) episode, we’ll wrap things up and I’ll help you resolve the dilemma! ","date":"16 Mar 2020","objectID":"/posts/2020/rn-flutter-dilemma-3-under-hood/:6:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How they work - (Part 3)","uri":"/posts/2020/rn-flutter-dilemma-3-under-hood/"},{"categories":null,"content":"4 February 2020 - [Android] Architecture Night ","date":"4 Feb 2020","objectID":"/talks/2020/tips-modularization-arch-night/:0:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-arch-night/"},{"categories":null,"content":"Abstract: Nowadays, App modularization is a technique largely adopted that gives lots of advantages. But how to approach it? This talk will not focus on the pro and cons of modularization but instead on the approach and the process to achieve it. In particular, I want to share the approach that I followed to modularize an existing application and a new one. I want also to share the failures and all the struggles that came in my head while approaching the process. ","date":"4 Feb 2020","objectID":"/talks/2020/tips-modularization-arch-night/:1:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-arch-night/"},{"categories":null,"content":"Slide: ","date":"4 Feb 2020","objectID":"/talks/2020/tips-modularization-arch-night/:2:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-arch-night/"},{"categories":null,"content":"Video: ","date":"4 Feb 2020","objectID":"/talks/2020/tips-modularization-arch-night/:3:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2020/tips-modularization-arch-night/"},{"categories":null,"content":"Welcome to the second part of this comparison about React Native and Flutter. In the first episode, we have introduced the two frameworks with some history and with a comparison between the languages that these two frameworks use. If you have lost the first episode, I suggest you read it before moving on. Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1) In this article, I will explain how to build user interfaces in React Native and Flutter. Disclaimer: This article will not cover all the deep aspects of the two frameworks, but I want to give you an overview to better understand the differences. For much deeper details, I suggest you look at the official documentation (React Native - Flutter) ","date":"7 Jan 2020","objectID":"/posts/2020/rn-flutter-dilemma-2-ui/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2)","uri":"/posts/2020/rn-flutter-dilemma-2-ui/"},{"categories":null,"content":"React Native Let’s jump immediately into some code (a simple Hello World). // React Native import React from \"react\"; import { StyleSheet, Text, View } from \"react-native\"; export default class App extends React.Component { render() { return ( \u003cView style={styles.container}\u003e \u003cText\u003eHello world!\u003c/Text\u003e \u003c/View\u003e ); } } const styles = StyleSheet.create({ container: { flex: 1, backgroundColor: \"#fff\", alignItems: \"center\", justifyContent: \"center\" } }); The entry point of this Hello World is the render method. Inside this method, we declare all the items (these items have a precise name, but I’ll reveal it in a moment) that has to be rendered on the screen. In this case, there is a View with inside a Text. These items are called Components and a Component is the basic building block that composes the UI. Of course, as showed in the example above, the Components can be nested together to build more complex components and UIs. The Components are declared and stylized (the styling is done by using CSS) by using a Domain Specific Language called JSX. This DSL is basically a (very simple) mixture of Javascript and XML. For more information about JSX, please refer to the documentation. \u003cText ellipsizeMode={\"tail\"} numberOfLines={this.props.numberOfLines || 100} style={{fontSize: 14}} \u003e \"Hello World\" \u003c/Text\u003e The React team has already developed lots of Components that we can use (there is a list of the available Components in the documentation) but we can also download and use Components developed by third-party developers. Every Component can be used in a standalone way or it can be combined with other ones to create a more complex one. Components catalogue. ","date":"7 Jan 2020","objectID":"/posts/2020/rn-flutter-dilemma-2-ui/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2)","uri":"/posts/2020/rn-flutter-dilemma-2-ui/"},{"categories":null,"content":"Flutter And now, let’s move to Flutter. As before, we start with a simple Hello World. // Flutter import 'package:flutter/material.dart'; void main() =\u003e runApp(MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return MaterialApp( home: Scaffold( appBar: AppBar( title: Text(\"Flutter Demo Home Page\"), ), body: Center( child: Text(\"Hello World\"), ), ), ); } } In Flutter, the equivalent of Components are Widgets and in the example above, for example instead of View and Text we have Center and Text. Flutter takes inspiration from React and the main idea is that the UI is built out of widgets. In fact, in Flutter everything is a widget: for example, the structural elements of the application ( buttons, menu, dialogs, etc ), the stylistic elements ( opacity, transformations, etc ) and also the aspect of the layout ( margins, paddings, alignments, etc ) are widgets. And even the application itself is a widget. In fact, the entire Hello World application that is defined before is a widget (MyApp) and more precisely a Stateless widget. In Flutter, you can use a Stateless or a Statefulwidget depending if you have to manage the state of the application. The entry point of the widget is the build method, that we have override every time we define a new widget. As you can see in the example above, we have declared a bunch of widgets: the MaterialApp widget where we can declare some theme customization, the Scaffold widget that provides the main structure of an application and finally the “real content” of our application, i.e. the Center widget with a Text widget as children. As the components in React Native, the widgets can be nested together to create to build more complex widgets and UIs. The Flutter team has already developed lots of widgets that we can use (there is a list of the available widgets in the documentation) but we can also download and use widgets developed by third-party developers. Widgets catalogue. ","date":"7 Jan 2020","objectID":"/posts/2020/rn-flutter-dilemma-2-ui/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2)","uri":"/posts/2020/rn-flutter-dilemma-2-ui/"},{"categories":null,"content":"Recap So, in Flutter we remain in the Dart context to define User Interfaces, while in React Native we have to learn a DSL (but is very simple). In both frameworks, we can modularize the UI by mixing simple “blocks”. And this modularization is highly suggested to avoid a mess codebase and a lot of nested widgets/components in your code. Alongside with the modularization of the UI, you should also add state management in your application. In this way, you can separate the presentation logic from the business logic, you can sync data between different components/widget, you can have a more testable code, etc. This topic will not be covered in this series of articles, but I want to give you some quick tips/suggestions. Both in Rect Native and Flutter, there is a “naive” way to manage the state provided by the framework. In a few words, you can define a default state and then update it by calling a setState method. When this method is called the UI is redrawn (with of course some optimizations) to show the update state. For more information, I suggest you read the documentation, both for React Native and Flutter. There are also more powerful ways to manage the state, for example for React Native: Redux, Mobx, Apollo, etc. while for Flutter: again Redux, BLoC, Scoped Model, etc. A list of different state management possibilities for Flutter can be found on fluttersamples.com website. Before ending this journey into the User Interfaces, I need to tell you that this style of building UIs has a name: Declarative. In the mobile world we are all used to define UIs in an imperative style, i.e. if we want to update an element of the UI, for example, a TextView, we ask the view owner an instance of that element and then we update it based on the new state. With the declarative style, we define the current UI state (e.g. a loading state, an error state, etc.) and the framework manages the state changes. This pattern has lots of benefits (but this is not the right place to talk about it - maybe in a future blog post) and is borrowed from the web world, from frameworks like React and Vue.js. Next, it started to appear in the mobile world with React Native and then Flutter and finally, it captured the attention of the “native world” with Jetpack Compose and Swift UI. And I think that Declarative patterns are the future. And for today is enough. After this journey into User Interfaces, in the next episode, we’ll dive under the hood of these frameworks. ","date":"7 Jan 2020","objectID":"/posts/2020/rn-flutter-dilemma-2-ui/:3:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2)","uri":"/posts/2020/rn-flutter-dilemma-2-ui/"},{"categories":null,"content":"20-21 December 2019 - droidcon Madrid 19 ","date":"20 Dec 2019","objectID":"/talks/2019/tips-modularization-droidcon-madrid/:0:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2019/tips-modularization-droidcon-madrid/"},{"categories":null,"content":"Abstract: Nowadays, App modularization is a technique largely adopted that gives lots of advantages. But how to approach it? This talk will not focus on the pro and cons of modularization but instead on the approach and the process to achieve it. In particular, I want to share the approach that I followed to modularize an existing application and a new one. I want also to share the failures and all the struggles that came in my head while approaching the process. ","date":"20 Dec 2019","objectID":"/talks/2019/tips-modularization-droidcon-madrid/:1:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2019/tips-modularization-droidcon-madrid/"},{"categories":null,"content":"Slide: ","date":"20 Dec 2019","objectID":"/talks/2019/tips-modularization-droidcon-madrid/:2:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2019/tips-modularization-droidcon-madrid/"},{"categories":null,"content":"Video: Coming soon! ","date":"20 Dec 2019","objectID":"/talks/2019/tips-modularization-droidcon-madrid/:3:0","tags":null,"title":"7+1 tips about [Android] App Modularization","uri":"/talks/2019/tips-modularization-droidcon-madrid/"},{"categories":null,"content":"These days you have certainly heard about cross-platform mobile development, in particular about the “senior” React Native and the “freshman” Flutter. Today, I want to start a series of articles to understand the two frameworks. In particular, I want to describe their differences, their weaknesses, their strength… so, all you need to know to help your choice. In this article, I want to introduce the two frameworks with a historical overview and an analysis of the languages that they use. Next, in the following articles, I will move the focus on how to build User Interfaces with these two frameworks and how they work internally. ","date":"12 Dec 2019","objectID":"/posts/2019/rn-flutter-dilemma-1-intro/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1)","uri":"/posts/2019/rn-flutter-dilemma-1-intro/"},{"categories":null,"content":"History Before starting with the comparison, I think that a little bit of history is mandatory. The first version of React Native has been developed during an internal Facebook hackathon in 2013 and a first version has been previewed two years later in January 2015. Finally, in May 2015, React Native has been officially launched and open-sourced. Flutter instead is younger and a first embryonal version has been revealed during the Dart Dev Summit of 2015. After two years, an alpha release has been released during the Google I/O 2017 and the final 1.0 release came out in December 2018. Today, React Native is the standard de facto for cross-platform development. In fact, during the years React Native has gained success because it can provide a “native feel” (in a following article I will explain how this is possible) and not a weird rendering with HTLM and CSS inside a WebView like for example Cordova or PhoneGap. Lots of famous apps are using React Native, for example, Facebook, Instagram, Pinterest, Instagram, Discord and much more. Despite the youngness, Flutter is gaining lots of attention in the “cross-platform square”. In fact, there are already some (complex) apps that use Flutter, for example, Google Ads, the Alibaba’s app Xianyu. Google Search Trends for “React Native” and “Flutter”. ","date":"12 Dec 2019","objectID":"/posts/2019/rn-flutter-dilemma-1-intro/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1)","uri":"/posts/2019/rn-flutter-dilemma-1-intro/"},{"categories":null,"content":"Language The language used by React Native is Javascript, a language that you can love or you can hate, there isn’t a half-measure. In general, people with an object-oriented background could encounter difficulties when they use Javascript for the first time. Some “weird” arguments can be the type conversion, the prototype-based inheritance, the fact that code can fail silently, etc. These are not random facts but happened to me to deal with them. Also, there is a little bit of confusion around the Javascript ecosystem: lots of libraries, frameworks, multiple approaches to perform the same thing. If you want to (or you have to) use React Native, I suggest you go with Typescript especially if you come from an object-oriented background. Flutter instead uses Dart, an open-source, object-oriented language developed by Google in 2011. Google wanted to create a language that improves some of the pitfalls that Javascript has, for example, the handling of the types. So Dart is a strongly typed language but the type can be inferred. Dart is capable both to compile to native code (ARM \u0026 x64) for mobile, desktop and backend and to transpile to Javascript for the web. The syntax is very similar to object-oriented languages and the learning curve to learn the language is flat. Going with React Native can be tempting if you already have skills in web development since you will be going to use Javascript or Typescript. With Flutter instead, you have to learn a new language, even if is very simple to learn. However, with React Native often happens that you have to deal with Native code, especially for linking new third party libraries. With Flutter instead is rare that you have to touch native code unless you want to develop a custom plugin that uses native APIs. And for today is enough. After this brief introduction, in the next episode, we’ll talk about how to build User Interfaces. ","date":"12 Dec 2019","objectID":"/posts/2019/rn-flutter-dilemma-1-intro/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1)","uri":"/posts/2019/rn-flutter-dilemma-1-intro/"},{"categories":null,"content":"16 November 2019 - DevFestVeneto 19 ","date":"16 Nov 2019","objectID":"/talks/2019/flutter-rn-devfestve/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestve/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"16 Nov 2019","objectID":"/talks/2019/flutter-rn-devfestve/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestve/"},{"categories":null,"content":"Slide: ","date":"16 Nov 2019","objectID":"/talks/2019/flutter-rn-devfestve/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestve/"},{"categories":null,"content":"Video: ","date":"16 Nov 2019","objectID":"/talks/2019/flutter-rn-devfestve/:3:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestve/"},{"categories":null,"content":"30 October 2019 - Kotlin/Everywhere ","date":"30 Oct 2019","objectID":"/talks/2019/kotlin-everywhere-venezia/:0:0","tags":null,"title":"Kotlin Multiplatform | Kotlin/Everywhere Venezia","uri":"/talks/2019/kotlin-everywhere-venezia/"},{"categories":null,"content":"Abstract: In this talk, we will see how it’s possible to create a mobile application for Android and iOs that share some code (for example business logic, network, etc.) using Kotlin Platform. We will show a real application that we have built for this talk, i.e. a showcase app for the GDG Venezia. We will show also how it’s possible to create a backend for this app by of course using Kotlin! This talk has been done in collaboration with Andrea Maglie that I thank ","date":"30 Oct 2019","objectID":"/talks/2019/kotlin-everywhere-venezia/:1:0","tags":null,"title":"Kotlin Multiplatform | Kotlin/Everywhere Venezia","uri":"/talks/2019/kotlin-everywhere-venezia/"},{"categories":null,"content":"Slide: ","date":"30 Oct 2019","objectID":"/talks/2019/kotlin-everywhere-venezia/:2:0","tags":null,"title":"Kotlin Multiplatform | Kotlin/Everywhere Venezia","uri":"/talks/2019/kotlin-everywhere-venezia/"},{"categories":null,"content":"Video: ","date":"30 Oct 2019","objectID":"/talks/2019/kotlin-everywhere-venezia/:3:0","tags":null,"title":"Kotlin Multiplatform | Kotlin/Everywhere Venezia","uri":"/talks/2019/kotlin-everywhere-venezia/"},{"categories":null,"content":"Source Code: App source code: bit.ly/gdgvenezia-kmp Backend source code: bit.ly/gdgvenezia-backend ","date":"30 Oct 2019","objectID":"/talks/2019/kotlin-everywhere-venezia/:4:0","tags":null,"title":"Kotlin Multiplatform | Kotlin/Everywhere Venezia","uri":"/talks/2019/kotlin-everywhere-venezia/"},{"categories":null,"content":"4-5 October 2019 - droidcon Transylvania ","date":"4 Oct 2019","objectID":"/talks/2019/flutter-rn-droidcon-ro/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-droidcon-ro/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"4 Oct 2019","objectID":"/talks/2019/flutter-rn-droidcon-ro/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-droidcon-ro/"},{"categories":null,"content":"Slide ","date":"4 Oct 2019","objectID":"/talks/2019/flutter-rn-droidcon-ro/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-droidcon-ro/"},{"categories":null,"content":"1 October 2019 - GDG Venezia ","date":"1 Oct 2019","objectID":"/talks/2019/flutter-study-jam-gdg/:0:0","tags":null,"title":"Flutter Study Jam: let's build together an app for the GDG Venice","uri":"/talks/2019/flutter-study-jam-gdg/"},{"categories":null,"content":"Abstract: A brief introduction to the Flutter framework before starting a codelab where an app for GDG Venice will be built starting from a custom skeleton, The skeleton is available on Github together with 3 sample applications: a hello world, a bottom navigation bar example, and a list view example. https://github.com/GDG-Venezia/flutter-study-jam ","date":"1 Oct 2019","objectID":"/talks/2019/flutter-study-jam-gdg/:1:0","tags":null,"title":"Flutter Study Jam: let's build together an app for the GDG Venice","uri":"/talks/2019/flutter-study-jam-gdg/"},{"categories":null,"content":"Slide ","date":"1 Oct 2019","objectID":"/talks/2019/flutter-study-jam-gdg/:2:0","tags":null,"title":"Flutter Study Jam: let's build together an app for the GDG Venice","uri":"/talks/2019/flutter-study-jam-gdg/"},{"categories":null,"content":"24-25 September 2019 - .droidconGreece ","date":"24 Sep 2019","objectID":"/talks/2019/flutter-rn-droidcon-gr/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-droidcon-gr/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"24 Sep 2019","objectID":"/talks/2019/flutter-rn-droidcon-gr/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-droidcon-gr/"},{"categories":null,"content":"Slide: ","date":"24 Sep 2019","objectID":"/talks/2019/flutter-rn-droidcon-gr/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-droidcon-gr/"},{"categories":null,"content":"18 September 2019 - FEVR ","date":"18 Sep 2019","objectID":"/talks/2019/flutter-rn-fevr/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fevr/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"18 Sep 2019","objectID":"/talks/2019/flutter-rn-fevr/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fevr/"},{"categories":null,"content":"Slide ","date":"18 Sep 2019","objectID":"/talks/2019/flutter-rn-fevr/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fevr/"},{"categories":null,"content":"Video ","date":"18 Sep 2019","objectID":"/talks/2019/flutter-rn-fevr/:3:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fevr/"},{"categories":null,"content":"Podcast Listen to \"Flutter or React Native, a cross-platform dilemma\" on Spreaker. ","date":"18 Sep 2019","objectID":"/talks/2019/flutter-rn-fevr/:4:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fevr/"},{"categories":null,"content":"16 September 2019 - Programmers in Padua ","date":"16 Sep 2019","objectID":"/talks/2019/flutter-rn-pip/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-pip/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"16 Sep 2019","objectID":"/talks/2019/flutter-rn-pip/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-pip/"},{"categories":null,"content":"Slide: ","date":"16 Sep 2019","objectID":"/talks/2019/flutter-rn-pip/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-pip/"},{"categories":null,"content":"Video: ","date":"16 Sep 2019","objectID":"/talks/2019/flutter-rn-pip/:3:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-pip/"},{"categories":null,"content":"Podcast: ","date":"16 Sep 2019","objectID":"/talks/2019/flutter-rn-pip/:4:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-pip/"},{"categories":null,"content":"Today I want to share my setup of note-taking that I use during conferences. Unfortunately, I’m not the guy able to take the beautiful, colorful sketchnotes that you can see on Twitter. That’s because I have never been able to draw, put colors and do manual graphics stuff in an orderly manner. My notes on paper would be colorless and cryptic. Moreover, I like the idea to have in one place, all the information regarding the talk that I watched, for example, link to the slides, photo, video, etc. So, after long and many tests, I found that OneNote by Microsoft is the best solution for me. Of course, I’m open to suggestions; in the future, I want also to try Notion. Now, let’s give a look to my OneNote setup. In OneNote, you can create notebooks, sections, and pages: the sections are contained in a notebook and the pages are contained in a section. I use sections as collectors for different arguments: so, for example, I have a section that gathers all the conferences, one for the online courses that I follow, one for my side projects and so on and so forth. In the section dedicated to the conferences, I create a page for each conference I attend. Inside this page, I write the title of the talk that I’m attending and I start to take my notes! I take my notes using the desktop or the mobile application, it depends on my mood. Together with notes, I like to add some interesting slides. I know, I can it later on when the speaker uploads them, but I like to have some slide embedded with notes. After the talk or after the conference, I update the “talk section” with the link to the slide and/or the video recording. In this way, I have all the useful information that I want to remember in one place. Eventually, from OneNote you can export the page as PDF to share with other people. However, I admit that the export function of OneNote is a bit silly. In fact, all the images will be cut in order to fit correctly the A4 page if they are placed in a “border zone”. But for this I have a “hack”: if you export the note as PDF from the mobile application, a single page PDF will be generated. I know, this is not so beautiful but I don’t use very often the export function. This is also the main reason that makes me want to try Notion, as said above. So this is my setup. If you have some suggestions, I’m glad to listen to them and I hope that these tips will be helpful! ","date":"6 Jul 2019","objectID":"/posts/2019/note-conferences/:0:0","tags":null,"title":"How I take note at conferences","uri":"/posts/2019/note-conferences/"},{"categories":null,"content":"15 June 2019 - FVG Dev ","date":"15 Jun 2019","objectID":"/talks/2019/flutter-rn-fvgdev/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fvgdev/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"15 Jun 2019","objectID":"/talks/2019/flutter-rn-fvgdev/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fvgdev/"},{"categories":null,"content":"Slide: ","date":"15 Jun 2019","objectID":"/talks/2019/flutter-rn-fvgdev/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-fvgdev/"},{"categories":null,"content":"5 June 2019 - GDG Venezia Tech Talks ","date":"5 Jun 2019","objectID":"/talks/2019/flutter-rn-gdg/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-gdg/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks. In particular, we will understand how to build User Interfaces and how the internals of the two framework works. Finally, we will try to understand when and why to choose a cross-platform framework and which of the two. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle both for work and fun reasons. ","date":"5 Jun 2019","objectID":"/talks/2019/flutter-rn-gdg/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-gdg/"},{"categories":null,"content":"Slide: ","date":"5 Jun 2019","objectID":"/talks/2019/flutter-rn-gdg/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-gdg/"},{"categories":null,"content":"Video: ","date":"5 Jun 2019","objectID":"/talks/2019/flutter-rn-gdg/:3:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-gdg/"},{"categories":null,"content":"Update - February 2021 As you may have heard, JCenter is shutting down in May 2021. Into the Sunset on May 1st: Bintray, JCenter, GoCenter, and ChartCenter https://jfrog.com/blog/into-the-sunset-bintray-jcenter-gocenter-and-chartcenter/ So, this tutorial is no longer recommended because it explains how to publish an Android library to JCenter. I suggested you follow this guide written by Márton Braun. Publishing Android libraries to MavenCentral in 2021 https://getstream.io/blog/publishing-libraries-to-mavencentral-2021/ If you have already published a library on JCenter and you want to migrate the old artifacts to MavenCentral, you can follow the guide that I’ve written: Migrating old artifacts from JCenter to MavenCentral https://www.marcogomiero.com/posts/2021/move-libray-jcenter-to-maven/ ","date":"28 May 2019","objectID":"/posts/2019/publish-librery-android/:1:0","tags":null,"title":"How to publish and distribute your Android library","uri":"/posts/2019/publish-librery-android/"},{"categories":null,"content":"Original Article: You have just built an awesome Android library but you don’t know how to publish it? You are in the right place; in this article, I will explain to you the process that I use to publish my two libraries. First of all, let’s assume that you have already developed your Android library, so you have a library module in Android Studio. An example of a library module The library will be published to *jCenter, *a Maven repository hosted by bintray.com. The process is simple: the library is built locally in Android Studio, the artifacts will be upload to bintray and then linked to jCenter. In this way, the developers that want to use your library has only to declare it in the *build.gradle *file of their projects. For example: implementation \"com.prof.rssparser:rssparser:2.0.4\" The first thing to do is to create a Bintray account and for open source projects is FREE. Create a Bintray account After the creation of the account, you have to choose a repository. Let’s go with Maven (I know, you are thinking “Why? I want to publish it to jCenter”. Well, as said above jCenter is a Maven repository so we have to choose Maven). Choose Maven as repository Now you can create a new package inside your Maven repository. Add a new package to the Maven repository Add basic information of the library After adding all the basic information of your library, like name, description, license, tags, etc., the repository of the library is ready. Now, back to the code. I’ll take as reference, a library that I’ve developed, so you can dive into the real code if you want. prof18/RSS-Parser First of all, you have to add some dependencies into the build.gradle file of your project. classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0' classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4' EDIT: The android-maven-gradle-plugin has been deprecated and you have to change the plugin to generate the artifact if you are using Gradle 5 and above. The new plugin is the one developed by Sky-UK and you need to apply it on the publish.gradle file (more details about it later on). sky-uk/gradle-maven-plugin So we can get rid of the deprecated dependency: classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4' At this point, we are ready to create the publishing script. Inside the library project, create a publish.gradle file and apply it on the *build.gradle file *of your library. apply from: 'publish.gradle' apply plugin: 'maven-publish' apply plugin: 'com.jfrog.bintray' group 'com.your.awesome.lib' version '1.0.0' publishing { publications { Production(MavenPublication) { artifact(\"$buildDir/outputs/aar/awesomelibrary-release.aar\") { builtBy tasks.getByName(\"assembleRelease\") } groupId artifactId 'awesomelibrary' version this.version pom.withXml { def dependenciesNode = asNode().appendNode('dependencies') // Iterate over the implementation dependencies (we don't want the test ones), adding a \u003cdependency\u003e node for each configurations.implementation.allDependencies.each { // Ensure dependencies such as fileTree are not included in the pom. if (it.name != 'unspecified') { def dependencyNode = dependenciesNode.appendNode('dependency') dependencyNode.appendNode('groupId', it.group) dependencyNode.appendNode('artifactId', it.name) dependencyNode.appendNode('version', it.version) } } } } } } def properties = new Properties() properties.load(new FileInputStream(\"local.properties\")) bintray { user = properties.getProperty(\"bintray.user\") key = properties.getProperty(\"bintray.apikey\") publications = ['Production'] configurations = ['archives'] override = true pkg { repo = 'maven' name = 'AwesomeLib' description = \"It's an awesome lib\" publicDownloadNumbers = true licenses = ['Apache-2.0'] vcsUrl = 'https://github.com/prof18/AwesomeLib' version { name = this.version desc = \"Version ${this.version}\" released = new Date() vcsTag = this.version } } } EDIT: Starting from Gradle 5 and above, the previous script is not valid anymore and you","date":"28 May 2019","objectID":"/posts/2019/publish-librery-android/:2:0","tags":null,"title":"How to publish and distribute your Android library","uri":"/posts/2019/publish-librery-android/"},{"categories":null,"content":"13 April 2019 - DevFest Pisa ","date":"13 Apr 2019","objectID":"/talks/2019/flutter-rn-devfestpi/:0:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestpi/"},{"categories":null,"content":"Abstract: Nowadays the hype around Flutter is raising a lot. But what about the “(not so) old-fashioned” React Native? In this talk, we will see the basics and the differences between the two frameworks and which to choose. All this journey is based on the true story of an Android Developer that he wanted to explore the cross-platform jungle. ","date":"13 Apr 2019","objectID":"/talks/2019/flutter-rn-devfestpi/:1:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestpi/"},{"categories":null,"content":"Slide: ","date":"13 Apr 2019","objectID":"/talks/2019/flutter-rn-devfestpi/:2:0","tags":null,"title":"Flutter or React Native, a cross-platform dilemma","uri":"/talks/2019/flutter-rn-devfestpi/"},{"categories":null,"content":"The recent revamp of the Material Design has introduced new beautiful items, for example, the Bottom App Bar. Image from Material Design Guidelines With Flutter is super easy to implement like shown in the official documentation. However, for me, the tricky part is to combine it with swipeable tabs so, in this article, I’ll explain all the steps that I’ve followed to obtain it. Here’s a spoiler of the final result: So (another spoiler), we have to mix together three elements: a BottomAppBar, a BottomSheet, and a TabBarView. First of all, the first step is to create a Placeholder widget that will be shown in the different tabs in which simply shows a text in the center. Of course, this widget should be replaced with the specific implementation. import 'package:flutter/material.dart'; class PlaceholderWidget extends StatelessWidget { final String text; PlaceholderWidget(this.text); @override Widget build(BuildContext context) { return Center(child: Text(text)); } } Now, its time to create the structure in which the Placeholder widgets will be shown by using a Scaffold widget. In this case, the Scaffold Widget has three main children: a FloatingActionButton, a TabBarView and a BottomAppBar. Let’s start with the TabBarView. Usually, the TabBarView is combined with the TabBar that creates an alternative to the swipe to change tab ( You can find an example in the official Flutter doc). However, in this case, the alternative is provided by the menu callable from the BottomAppBar as shown in the GIF above. TabBarView( controller: _controller, children: _allPages.map\u003cWidget\u003e((_Page page) { return SafeArea( top: false, bottom: false, child: Container( key: ObjectKey(page.widget), padding: const EdgeInsets.all(12.0), child: page.widget ), ); }).toList() As you can see, it is a very simple snippet that returns as children (i.e. the different tabs) the widgets contained in the variable _allPages. These widgets are all of the type PlaceholderWidget. In addition to the children, we have to provide a controller, that is the “guy” that keeps the selected tab and content sections in sync. In this case, we don’t use the DefaultTabController , but we create a TabController to handle the tabs also from the menu. If the swipe is enough to change tabs, we could simply use the DefaultTabController. _controller = TabController(vsync: this, length: _allPages.length); Now, let’s focus on the BottomAppBar. bottomNavigationBar: BottomAppBar( child: new Row( mainAxisSize: MainAxisSize.max, mainAxisAlignment: MainAxisAlignment.spaceBetween, children: \u003cWidget\u003e[ IconButton( icon: Icon(Icons.menu), onPressed: () { _showModal(); }), IconButton( icon: Icon(Icons.search), ) ], ), ) As Bottom Bar, we simply show a row with two icons at the edges. This can be done by setting the mainAxisSize and the mainAxisAlignment respectively to MainAxisSize.max and MainAxisAlignment.spaceBetween . One of these two icons is our menu. By clicking it, we will show a Bottom Sheet that shows the list of tabs. void _showModal() { showModalBottomSheet\u003cvoid\u003e( context: context, builder: (BuildContext context) { return new Column( mainAxisSize: MainAxisSize.min, children: \u003cWidget\u003e[ new ListTile( leading: new Icon(Icons.music_note), title: new Text('Screen 1'), onTap: () { _controller.animateTo(0); Navigator.pop(context); }, ), new ListTile( leading: new Icon(Icons.photo_album), title: new Text('Screen 2'), onTap: () { _controller.animateTo(1); Navigator.pop(context); }, ), new ListTile( leading: new Icon(Icons.videocam), title: new Text('Screen 3'), onTap: () { _controller.animateTo(2); Navigator.pop(context); }, ), ], ); } ); } In order to create and show a Bottom Sheet we need to call the showModalBottomSheet\u003cvoid\u003e method and provide in the builder, the widgets that we want to show. In this case, we use a Column with ListTile widgets, i.e. a widget that can have a leading and a trailing icon and some text. To navigate to the different tabs, we have to use the TabController defined abo","date":"20 Mar 2019","objectID":"/posts/2019/bottom-bar-swipe-flutter/:0:0","tags":null,"title":"Bottom App Bar with Menu and Swipeable Tabs in Flutter","uri":"/posts/2019/bottom-bar-swipe-flutter/"},{"categories":null,"content":"9 February 2019 - FéMO 2019 – Dai garage alle piazze - Padova ","date":"9 Feb 2019","objectID":"/talks/2019/flutter-femo/:0:0","tags":null,"title":"Hi, have you met Flutter?","uri":"/talks/2019/flutter-femo/"},{"categories":null,"content":"Abstract: A brief introduction to the Flutter framework before the official Google Codelab. ","date":"9 Feb 2019","objectID":"/talks/2019/flutter-femo/:1:0","tags":null,"title":"Hi, have you met Flutter?","uri":"/talks/2019/flutter-femo/"},{"categories":null,"content":"Slide: ","date":"9 Feb 2019","objectID":"/talks/2019/flutter-femo/:2:0","tags":null,"title":"Hi, have you met Flutter?","uri":"/talks/2019/flutter-femo/"},{"categories":null,"content":" Photo by felipe lopez on Unsplash Some weeks ago I released a new version of the RSS Parser Library and I talked about the update in a blog post. RSS Parser 2.0: bye bye Async Task, welcome Coroutines This update brought a huge change in the infrastructure of the library. SPOILER: Kotlin and coroutines. Today, in this post I want to talk about the transition process and all the decisions that I have made to develop this new version. In this way, I hope to inspire you to leave the Async Task and get into the coroutines world. But, before starting with the technical details, I want to share you some resources to get into the coroutine world. If you already know the coroutines you can skip to the second part of the article. ","date":"14 Jan 2019","objectID":"/posts/2019/asynctask-to-coroutines/:0:0","tags":null,"title":"A journey from Async Task to Kotlin Coroutines","uri":"/posts/2019/asynctask-to-coroutines/"},{"categories":null,"content":"Get into the coroutine world, it’s funny. I promise: The first thing that you can do to get into the coroutine world is doing the codelab provided by Google. Using Kotlin Coroutines in your Android App Don’t worry if you don’t understand all the concepts, the codelab is useful to make the first exploration and to receive the inputs and the tools to study a particular argument. After the codelab, I suggest you give a look to the official documentation that is well written and full of examples. Kotlin/kotlinx.coroutines Then you could read some articles Android specific and not. Here are some articles that I’ve read: An introduction to Kotlin Coroutines* How to make sense of Kotlin coroutines Kotlin Coroutines patterns \u0026 anti-patterns Playing with Kotlin in Android: coroutines and how to get rid of the callback hell Android Networking with Coroutines and Retrofit Handle Complex Network Call with Kotlin Coroutine + Retrofit 2 Async code using Kotlin Coroutines I suggest also the talks of Chris Banes and Christina Lee: So you’ve read the Coroutines guide and you’re ready to start using them in your Android app to coroutines? Great! Coroutines By Example Of course, there are lots of resources available and lots of ways to learn the coroutines. These are some advice based on my experience and learning path. ","date":"14 Jan 2019","objectID":"/posts/2019/asynctask-to-coroutines/:1:0","tags":null,"title":"A journey from Async Task to Kotlin Coroutines","uri":"/posts/2019/asynctask-to-coroutines/"},{"categories":null,"content":"The Path From Async Task to Coroutines The first release of the library is dated 18 June 2016, a period when there wasn’t all the beautiful stuff that there is today (for instance, Kotlin) and moreover I did not know all the stuff that I know today. The code was so simple (and now I can also say that was ugly) but it was working. ","date":"14 Jan 2019","objectID":"/posts/2019/asynctask-to-coroutines/:2:0","tags":null,"title":"A journey from Async Task to Kotlin Coroutines","uri":"/posts/2019/asynctask-to-coroutines/"},{"categories":null,"content":"Old School Java Code I used an Async Task to handle the network request; the result of the request is sent to an XML Parser that notifies its result when the parsing was done. Here’s the code of the Parser: public class Parser extends AsyncTask\u003cString, Void, String\u003e implements Observer { private XMLParser xmlParser; private static ArrayList\u003cArticle\u003e articles = new ArrayList\u003c\u003e(); private OnTaskCompleted onComplete; public Parser() { xmlParser = new XMLParser(); xmlParser.addObserver(this); } public interface OnTaskCompleted { void onTaskCompleted(ArrayList\u003cArticle\u003e list); void onError(); } public void onFinish(OnTaskCompleted onComplete) { this.onComplete = onComplete; } @Override protected String doInBackground(String... ulr) { Response response = null; OkHttpClient client = new OkHttpClient(); Request request = new Request.Builder() .url(ulr[0]) .build(); try { response = client.newCall(request).execute(); if (response.isSuccessful()) return response.body().string(); } catch (IOException e) { e.printStackTrace(); onComplete.onError(); } return null; } @Override protected void onPostExecute(String result) { if (result != null) { try { xmlParser.parseXML(result); Log.i(\"RSS Parser \", \"RSS parsed correctly!\"); } catch (Exception e) { e.printStackTrace(); onComplete.onError(); } } else onComplete.onError(); } @Override @SuppressWarnings(\"unchecked\") public void update(Observable observable, Object data) { articles = (ArrayList\u003cArticle\u003e) data; onComplete.onTaskCompleted(articles); } } Then, the result of the parsing (or an error of parsing) is notified to the “main executor” (the application that uses the library) with two simple callbacks. Parser parser = new Parser(); parser.execute(urlString); parser.onFinish(new Parser.OnTaskCompleted() { //what to do when the parsing is done @Override public void onTaskCompleted(ArrayList\u003cArticle\u003e list) { //list is an Array List with all article's information //set the adapter to recycler view mAdapter = new ArticleAdapter(list, R.layout.row, MainActivity.this); mRecyclerView.setAdapter(mAdapter); progressBar.setVisibility(View.GONE); mSwipeRefreshLayout.setRefreshing(false); } //what to do in case of error @Override public void onError() { runOnUiThread(new Runnable() { @Override public void run() { progressBar.setVisibility(View.GONE); mSwipeRefreshLayout.setRefreshing(false); Toast.makeText(MainActivity.this, \"Unable to load data.\", Toast.LENGTH_LONG).show(); Log.i(\"Unable to load \", \"articles\"); } }); } }); ","date":"14 Jan 2019","objectID":"/posts/2019/asynctask-to-coroutines/:2:1","tags":null,"title":"A journey from Async Task to Kotlin Coroutines","uri":"/posts/2019/asynctask-to-coroutines/"},{"categories":null,"content":"Kotlin and Coroutines, a love story After 2 years, I wanted to get rid of Async Task, Java and all the ugly stuff. The perfect candidates for taking the place are Kotlin and the coroutines. However, my biggest concern was maintaining the compatibility with all the devs that still use Java (seriously guys? Love yourself, move to Kotlin). In fact, the Kotlin coroutines cannot be invoked from Java code. At first, I tried to figure out if there was a method to call the coroutines from Java but finally I came up with a brilliant idea: provide the support for both the ways. For the Java support, I decided to use Future and Callable to handle the asynchronous operations. In particular, I implemented two classes that perform respectively the fetching and the parsing task. class XMLFetcher(private val url: String) : Callable\u003cString\u003e { @Throws(Exception::class) override fun call(): String { return CoreXMLFetcher.fetchXML(url) } } class XMLParser(var xml: String) : Callable\u003cMutableList\u003cArticle\u003e\u003e { @Throws(Exception::class) override fun call(): MutableList\u003cArticle\u003e { return CoreXMLParser.parseXML(xml) } } The result of the parsing is then notified to the “main executor” using the same callbacks reported above. fun execute(url: String) { Executors.newSingleThreadExecutor().submit{ val service = Executors.newFixedThreadPool(2) val f1 = service.submit\u003cString\u003e(XMLFetcher(url)) try { val rssFeed = f1.get() val f2 = service.submit(XMLParser(rssFeed)) onComplete.onTaskCompleted(f2.get()) } catch (e: Exception) { onComplete.onError(e) } finally { service.shutdown() } } } In this way, the old users of the library can still call the same code without noticing any kind of difference but the new ones (and of course also the old) can learn and use the new way. As you can image, the new part is written using the Kotlin coroutines. As above, I separated the fetching and the parsing task. The fetching task is performed by the fetchXML suspending function, that takes the URL of the RSS feed as input and returns a Deferred object that will be the input of the parseXML suspend function. This function will then parse the RSS Feed and returns a list of parsed data. object CoroutineEngine { @Throws(Exception::class) suspend fun fetchXML(url: String) = withContext(Dispatchers.IO) { return@withContext CoreXMLFetcher.fetchXML(url) } @Throws(Exception::class) suspend fun parseXML(xml: Deferred\u003cString\u003e) = withContext(Dispatchers.IO) { return@withContext CoreXMLParser.parseXML(xml.await()) } } These functions are exposed to the “main executor” by using another suspend function, that it will get and parse asynchronously the RSS feed. @Throws(Exception::class) suspend fun getArticles(url: String) = withContext(Dispatchers.IO) { val xml = async { CoroutineEngine.fetchXML(url) } return@withContext CoroutineEngine.parseXML(xml) } All the suspend functions reported above are called with the IO Dispatcher that uses a shared pool of on-demand created threads. There are also other dispatchers, give a look to the documentation to find the one that better suits your needs. And finally, from the ViewModel (or in whatever place depending on the architecture of your app) you can launch the coroutine with a Scope, so, for example, you can stop it if the activity is destroyed, and then “transform” an URL to a List of Articles. coroutineScope.launch(Dispatchers.Main) { try { val parser = Parser() val articleList = parser.getArticles(url) setArticleList(articleList) } catch (e: Exception) { e.printStackTrace() _snackbar.value = \"An error has occurred. Please retry\" setArticleList(mutableListOf()) } } And finally, we have reached the end of my journey from Async Task to Coroutines. Of course, you can use this example as an idea to leave forever the (ugly) Async Tasks. If you want to contribute to the development of the library or simply report a bug, visit the repo on Github: https://github.com/prof18/RSS-Parser A special thanks to the (awesome) devs of the Android Developers Italia C","date":"14 Jan 2019","objectID":"/posts/2019/asynctask-to-coroutines/:2:2","tags":null,"title":"A journey from Async Task to Kotlin Coroutines","uri":"/posts/2019/asynctask-to-coroutines/"},{"categories":null,"content":"Finally, I found some time to sit down and work on my library RSS Parser. Before starting to describe all the cool stuff that I’ve introduced with this update, I want to thank you all for the support. In fact this year, the library exceeded 100 stars on Github, that seems a little goal but it means a lot to me. I wrote this library back in 2016 and now in 2018, the code was “ugly” compared to all the coolest stuff provided by Kotlin. So I decided to rewrite the library using Kotlin and Coroutines, so I can (finally) get rid of Async Task. Of course, I maintained the compatibility of the library for the projects that still use Java. Shortly, the library allows to parse an RSS feed and retrieve some information like title, content, author, etc. You can found more information about the features of the library in the blog post that I’ve published some time ago or in the README available on Github. But now let’s see some code. In this article, I’ll show only how to use the library because I’m planning to publish another blog post with all the technical details and decisions that I have made during the development of this new version. The usage is very simple both if you are using Java or Kotlin. If you are using Kotlin, you need to create a Parser object and then call the suspend method getArticles passing the URL of the RSS feed as parameter. Since this is a suspend function, you need to “launch” the coroutine. Of course, you need also to handle the error case. Here is an example: import com.prof.rssparser.Article import com.prof.rssparser.Parser //url of RSS feed private val url = \"[https://www.androidauthority.com/feed](https://www.androidauthority.com/feed)\" coroutineScope.launch(Dispatchers.Main) { try { val parser = Parser() val articleList = parser.getArticles(url) // The list contains all article's data. For example you can use it for your adapter. } catch (e: Exception) { // Handle the exception } } A complete example with Kotlin is available on Github. If you don’t know anything about the coroutines, I suggest you give a look to the Codelab provided by Google. Instead, if you are still using Java in your Android project, the usage is pretty the same as the older version of the library. You need to create a Parser object, implements the callbacks that handle the result and the error and finally start the parsing by calling the execute method passing the URL as parameter. Here is an example: import com.prof.rssparser.Article; import com.prof.rssparser.OnTaskCompleted; import com.prof.rssparser.Parser; Parser parser = new Parser(); parser.onFinish(new OnTaskCompleted() { //what to do when the parsing is done @Override public void onTaskCompleted(List\u003cArticle\u003e list) { // The list contains all article's data. For example you can use it for your adapter. } //what to do in case of error @Override public void onError(Exception e) { // Handle the exception } }); parser.execute(urlString); A complete example in Java is also available on Github. That’s all! For all the details or to report a bug, please visit the repo on Github. ","date":"22 Dec 2018","objectID":"/posts/2018/bye-async-task/:0:0","tags":null,"title":"RSS Parser 2.0: bye bye Async Task, welcome Coroutines","uri":"/posts/2018/bye-async-task/"},{"categories":null,"content":"6 October 2018 - DevFest Milano 2018 ","date":"6 Oct 2018","objectID":"/talks/2018/library-devfestmi/:0:0","tags":null,"title":"Library development: open source your ideas","uri":"/talks/2018/library-devfestmi/"},{"categories":null,"content":"Abstract: Have you ever thought that your idea could help other developers? Join the magic world of open source! In this talk we are going to share some tips and the secrets to become an open source master. Of course some practical examples based on our experience cannot miss. This talk has been done in collaboration with Andrea Maglie that I thank. ","date":"6 Oct 2018","objectID":"/talks/2018/library-devfestmi/:1:0","tags":null,"title":"Library development: open source your ideas","uri":"/talks/2018/library-devfestmi/"},{"categories":null,"content":"Slide: ","date":"6 Oct 2018","objectID":"/talks/2018/library-devfestmi/:2:0","tags":null,"title":"Library development: open source your ideas","uri":"/talks/2018/library-devfestmi/"},{"categories":null,"content":"Today I've released a new version of the Android library RSS-Parser. Let's see what changes!","date":"6 May 2018","objectID":"/posts/2018/image-update-rss-lib/","tags":null,"title":"New update for RSS Parser: featured image","uri":"/posts/2018/image-update-rss-lib/"},{"categories":null,"content":"Today I’ve released a new version of the Android library RSS-Parser This library allows you to easily download an (or multiple) RSS Feed in order to display it in your application. If you don’t know RSS-Parser, you can give a look to the blog post dedicated to it. In that post I’ll give also some tip about the library usage. Thanks to the issues and the suggestions provided by the community, I’ve improved the parsing of the feature image of the article. Now the parser, first search a specific image content, next if nothing is found it search inside the description and next inside the content of ther article. In this way there are three different sources for the image, in order to minimize the absense. That’s all for this update! Please let me know if you notice any bug or if you have any advice that can improve this library. Of course the source code of the library is on Github together with a sample application that shows what you can do with the library. Click here to view the library on Github Click here to show the code of the sample app Click here to download the app ","date":"6 May 2018","objectID":"/posts/2018/image-update-rss-lib/:0:0","tags":null,"title":"New update for RSS Parser: featured image","uri":"/posts/2018/image-update-rss-lib/"},{"categories":null,"content":"Sometimes, installing Wordpress on Arch Linux can be a tragedy. In this tutorial we are going to see all the steps to make everything work!","date":"19 Jan 2018","objectID":"/posts/2018/wordpress-arch/","tags":null,"title":"How to install Wordpress on Arch Linux","uri":"/posts/2018/wordpress-arch/"},{"categories":null,"content":" Every time I’ve tried to install Wordpress on Arch Linux it was a tragedy. Sometimes a configuration was missing, sometimes stuff not well known was broken and I never found an updated and complete guide. So here you are! In all the following commands I’ve omitted “sudo”. Please use it when it is necessary. Before starting make you sure that all the packages are updated. pacman -Syu ","date":"19 Jan 2018","objectID":"/posts/2018/wordpress-arch/:0:0","tags":null,"title":"How to install Wordpress on Arch Linux","uri":"/posts/2018/wordpress-arch/"},{"categories":null,"content":"Install Apache First of all, you need to install and configure Apache, the web server. pacman -S apache After the installation you have to start Apache and if you want you can set the auto-start at boot time with the enable command. systemctl start httpd systemctl enable httpd At this point you have to change some configurations of Apache. In order to do that, you can use your preferred editor like nano or vim. I’ll use nano. (If you aren’t a nano user here’s some tip: to search a string you have to press ctrl+w; to exit you have to press ctrl+x and type ‘y’ or ‘n’ in order to save or not the file. Remember that the saving process can give an error if the file isn’t opened as root and only the root user can edit it). So open the httpd.conf file nano /etc/httpd/conf/httpd.conf and uncomment (remove the #) the following string. #LoadModule unique_id_module modules/mod_unique_id.so At this point you have to restart Apache to apply the changes. systemctl restart httpd To make sure that all is correctly set and Apache is working you have to simply write an html file and put it into the /srv/http folder. So you can use again nano nano /srv/http/index.html to write this simple html file. \u003chtml\u003e \u003ctitle\u003eHello World\u003c/title\u003e \u003cbody\u003e \u003ch1\u003eThis is a test. Apache Web Server is working\u003c/h1\u003e \u003c/body\u003e \u003c/html\u003e Now open your broswer and go to http://localhost. If everything is up and running you should see a page like this: ","date":"19 Jan 2018","objectID":"/posts/2018/wordpress-arch/:1:0","tags":null,"title":"How to install Wordpress on Arch Linux","uri":"/posts/2018/wordpress-arch/"},{"categories":null,"content":"Install PHP Now it is the time to install PHP with the following command. pacman -S php php-cgi php-gd php-pgsql php-apache As you can image, you need to configure some stuff. Open again with your preferred editor the httpd.conf file: nano /etc/httpd/conf/httpd.conf comment (add a ‘#') this line LoadModule mpm_event_module modules/mod_mpm_event.so and uncomment (remove the ‘#') this one. #LoadModule mpm_prefork_module modules/mod_mpm_prefork.so Finally you have to add these lines at the bottom of the file. LoadModule php7_module modules/libphp7.so AddHandler php7-script php Include conf/extra/php7_module.conf Now it’s the time to configure the php.ini. Open the file nano /etc/php/php.ini and uncomment (remove the ‘;') the following lines. ;extension=mysqli.so ;extension=gd Now PHP (should be) is correctly set. To check if all is working, you can write a simple info page inside srv/http/. Open the editor, nano /srv/http/info.php write the following line \u003c?php phpinfo(); ?\u003e and restart the httpd service. systemctl restart httpd Now, if you open your broswer and you go to http://localhost/info.php, you should see a page like this: ","date":"19 Jan 2018","objectID":"/posts/2018/wordpress-arch/:2:0","tags":null,"title":"How to install Wordpress on Arch Linux","uri":"/posts/2018/wordpress-arch/"},{"categories":null,"content":"Install Maria DB Now you have to install and create the database. You are going to install Maria DB, the implementation of MySQL for Arch Linux. pacman -S mariadb libmariadbclient mariadb-clients After the installation you have to set some base configuration with this command. mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql As you guess, you need to start and enable the service. systemctl start mysqld systemctl enable mysqld Before creating the database, you have to set the root password and some other configurations. You can do it with this command mysql_secure_installation Finally now you can create your own database. Connect to the MySQL console with this command. mysql -u root -p After you type the password, you can start to create the database. Of course you can change the name of the database and the user. CREATEDATABASEwordpress;CREATEUSER'wpuser'@'localhost'IDENTIFIEDBY'password';GRANTALLPRIVILEGESONwordpress.*TO'wpuser'@'localhost';FLUSHPRIVILEGES; FINALLY it’s time to install Wordpress inside the /srv/http folder. cd /srv/http wget https://wordpress.org/latest.tar.gz tar xvzf latest.tar.gz cd wordpress Now you have to change the ownership of the folder wordpress to the http group. chown -R root:http /srv/http/wordpress The last step is to create the Wordpress config file starting from the default one. cp wp-config-sample.php wp-config.php All you have to do is opening the file nano wp-config.php and set the name of the database, the user and the password. /** The name of the database for WordPress */ define('DB_NAME', 'wordpress'); /** MySQL database username */ define('DB_USER', 'wpuser'); /** MySQL database password */ define('DB_PASSWORD', 'password'); Now everything is done. To check if it is true, open the broswer and go to http://localhost/wordpress and you should see a page like this. Now you can go through the classic setup of Wordpress. Enjoy it! ","date":"19 Jan 2018","objectID":"/posts/2018/wordpress-arch/:3:0","tags":null,"title":"How to install Wordpress on Arch Linux","uri":"/posts/2018/wordpress-arch/"},{"categories":null,"content":"Today I've released a new version of the Android library RSS-Parser. Let's see what changes!","date":"11 Dec 2017","objectID":"/posts/2017/update-rss-lib/","tags":null,"title":"New update for RSS Parser: article categories","uri":"/posts/2017/update-rss-lib/"},{"categories":null,"content":"Today I’ve released a new version of the Android library RSS-Parser This library allows you to easily download an (or multiple) RSS Feed in order to display it in your application. If you don’t know RSS-Parser, you can give a look to the blog post dedicated to it. In that post I’ll give also some tip about the library usage. Starting from today you can get also the categories of the article, like shown in the screen below. Of course the source code of the library is on Github together with a sample application that shows what you can do with the library. Click here to view the library on Github Click here to show the code of the sample app Click here to download the app. That’s all! Please let me know if you notice any bug or if you have any advice that can improve this library. ","date":"11 Dec 2017","objectID":"/posts/2017/update-rss-lib/:0:0","tags":null,"title":"New update for RSS Parser: article categories","uri":"/posts/2017/update-rss-lib/"},{"categories":null,"content":"RSS Parser is an Android Library that helps you to handle RSS Feed in your application. Let's see how it works!","date":"16 Aug 2017","objectID":"/posts/2017/rss-parser-library/","tags":null,"title":"How to easily handle RSS Feeds on Android with RSS Parser","uri":"/posts/2017/rss-parser-library/"},{"categories":null,"content":"Two month ago I have talked about YoutubeParser, an Android Library that I developed. Today I want to talk about RSS-Parser, another library that I wrote. This library allows you to easily download an (or multiple) RSS Feed in order to display it in your application. For every article it is possible to download the following information: Title Author Description Content Main Image Link Publication Date Here you can find an example of feed. The source code of the library is on Github together with a sample application that shows what you can do with the library. Click here to view the library on Github Click here to show the code of the sample app Click here to download the app Of course the library is available also on jCenter so you can easily add the dependency on Gradle. dependencies { compile 'com.prof.rssparser:rssparser:1.1' } Now, let’s give a look on how it works. First on all you need to create a new Parser object and next you can execute the Parser by calling the method execute(), that requires as parameter the URL of the RSS feed. If the data are correctly retrieved you can handle them inside the OnTaskCompleted method. Here you have an ArrayList of Article and you can use it for example to populate a Recycler View. Instead if some bad things happened, you can take actions inside the onError method. import com.prof.rssparser.Article; import com.prof.rssparser.Parser; //url of RSS feed String urlString = \"http://www.androidcentral.com/feed\"; Parser parser = new Parser(); parser.execute(urlString); parser.onFinish(new Parser.OnTaskCompleted() { @Override public void onTaskCompleted(ArrayList\u003cArticle\u003e list) { //what to do when the parsing is done //the Array List contains all article's data. } @Override public void onError() { //what to do in case of error } }); That’s all! Please let me know if you notice any bug or if you have any advice that can improve this library. ","date":"16 Aug 2017","objectID":"/posts/2017/rss-parser-library/:0:0","tags":null,"title":"How to easily handle RSS Feeds on Android with RSS Parser","uri":"/posts/2017/rss-parser-library/"},{"categories":null,"content":"Youtube Parser is an Android Library that helps you to handle Youtube videos from a specific channel. Let's see how it works!","date":"23 Jun 2017","objectID":"/posts/2017/update-yt-parser-2/","tags":null,"title":"New big update for Youtube Parser: video stats and much more","uri":"/posts/2017/update-yt-parser-2/"},{"categories":null,"content":"Finally I’ve released a new big update for YoutubeParser. For people who don’t know what I’m talking about, don’t worry now I’m going to explain all. YoutubeParser is the first Android library that I ever wrote. With this library it is possible to get information of videos from Youtube channels. These information are: Title Link Thumbnail, with three different image size. After a year I’ve released this new big update, named 2.0, that introduces a bunch of new things. First of all, now it is possible to load more than 50 videos from the same channel. 50 is the maximum number of videos that can be retrieved with a single request. Furthermore you can also get the statistics of a video: View Like Dislike Favorite Count Comment Count The source code of the library is on Github together with a sample application that shows what you can do with the library. Click here to view the library on Github Click here to show the code of the sample app Click here to download the app Of course the library is available also on jCenter so you can easily add the dependency on Gradle. dependencies { compile 'com.prof.youtubeparser:youtubeparser:2.0' } Now let’s look how it works. First of all you need to create a new Parser Object and then you have to create the url to load the data by using the method generateRequest. This method takes as parameter four values: The Channel ID of a Youtube Channel. For example, for this link youtube.com/channel/UCVHFbqXqoYvEWM1Ddxl0QDg, the Channel ID is: UCVHFbqXqoYvEWM1Ddxl0QDg The maximum number of videos to show. This value can be maximum 50. The type of ordering of the videos. It is possible to choose between two different type of ordering: by date or by views. To select the chosen value you have to use the constants: Parser.ORDER_DATE and Parser.ORDER_VIEW_COUNT The API Key. The key is a BROSWER API KEY and to create it you can follow this guide If the data are correctly retrieved, you can do your stuff inside the onTaskCompleted. Here you have two variable: an ArrayList of Video items that you can use to populate your view for instance and a token that is necessary to load more data (see below for more details). If there are some error on the process, you can handle the situation in the onError() method. import com.prof.youtubeparser.Parser; import com.prof.youtubeparser.models.videos.Video; Parser parser = new Parser(); //(CHANNEL_ID, NUMBER_OF_RESULT_TO_SHOW, ORDER_TYPE ,BROSWER_API_KEY) //https://www.youtube.com/channel/UCVHFbqXqoYvEWM1Ddxl0QDg --\u003e channel id = UCVHFbqXqoYvEWM1Ddxl0QDg //The maximum number of result to show is 50 //ORDER_TYPE --\u003e by date: \"Parser.ORDER_DATE\" or by number of views: \"ORDER_VIEW_COUNT\" String url = parser.generateRequest(CHANNEL_ID, 20, Parser.ORDER_DATE, API_KEY); parser.execute(url); parser.onFinish(new Parser.OnTaskCompleted() { @Override public void onTaskCompleted(ArrayList\u003cVideo\u003e list, String nextPageToken) { //what to do when the parsing is done //the ArrayList contains all video data. For example you can use it for your adapter } @Override public void onError() { //what to do in case of error } }); If you want to retrieved more videos from the same channel, the procedure is the same of the above case. The only difference is the method that generate the url; here you have to add the token retrieved from the above procedure. String url = parser.generateMoreDataRequest(CHANNEL_ID, 20, Parser.ORDER_DATE, API_KEY, nextToken); To get the statistics of a single video, the procedure is equivalent of the previous. As you can guess, the first thing to do is to generate the url with the generateStatsRequest method. The parameter of this method are: The ID of a Youtube Video The API Key Also here you can handle the result in the onTaskCompleted method and any error in the onError() method. import com.prof.youtubeparser.VideoStats; import com.prof.youtubeparser.models.stats.Statistics; VideoStats videoStats = new VideoStats(); String url = videoStats.generateStatsRequest(videoId","date":"23 Jun 2017","objectID":"/posts/2017/update-yt-parser-2/:0:0","tags":null,"title":"New big update for Youtube Parser: video stats and much more","uri":"/posts/2017/update-yt-parser-2/"},{"categories":null,"content":"On 17th December 2016 I've attended my first talk as speaker and I've talked about backup and restore on Android","date":"5 Apr 2017","objectID":"/posts/2017/backup-restore/","tags":null,"title":"How to deal with backup \u0026 restore on Android (Slide \u0026 Video) ","uri":"/posts/2017/backup-restore/"},{"categories":null,"content":"I know, I’m very very late. On 17th December 2016 I’ve attended my first talk as speaker (GDG Venezia Tech Talks 17/12/16). Despite the firsts scared thoughts this was an amazing experience! In fact I’ve replicated that, but I’ll talk about it with a future post (that won’t be published the next year - I promise :) ). The topic of the talk was a hot one: backup and restore on Android Application. But today I wanna only share the video and the slide of the talk (that is in Italian). In the following article I’ll go deep on the argument and I will explain all. Video: Slide: See you soon! ","date":"5 Apr 2017","objectID":"/posts/2017/backup-restore/:0:0","tags":null,"title":"How to deal with backup \u0026 restore on Android (Slide \u0026 Video) ","uri":"/posts/2017/backup-restore/"},{"categories":null,"content":"20 March 2017 - GDG Venezia Tech Talks ","date":"20 Mar 2017","objectID":"/talks/2017/android-things-gdg/:0:0","tags":null,"title":"Android Things - The power of Android for Internet of Things","uri":"/talks/2017/android-things-gdg/"},{"categories":null,"content":"Abstract: In this talk we’ll see what is Android Things and what we need to know to begin developing IoT application. ","date":"20 Mar 2017","objectID":"/talks/2017/android-things-gdg/:1:0","tags":null,"title":"Android Things - The power of Android for Internet of Things","uri":"/talks/2017/android-things-gdg/"},{"categories":null,"content":"Slide: ","date":"20 Mar 2017","objectID":"/talks/2017/android-things-gdg/:2:0","tags":null,"title":"Android Things - The power of Android for Internet of Things","uri":"/talks/2017/android-things-gdg/"},{"categories":null,"content":"Video: ","date":"20 Mar 2017","objectID":"/talks/2017/android-things-gdg/:3:0","tags":null,"title":"Android Things - The power of Android for Internet of Things","uri":"/talks/2017/android-things-gdg/"},{"categories":null,"content":"Hello World! Finally I decided to create my personal website. You will find blog post, tutorial and much more. The main topics will be Android, Java, Python and all the stuff that will capture my attention. If you wanna know more about me and my projects you can give a look to the categories above! ","date":"26 Jan 2017","objectID":"/posts/2017/hello-world/:0:0","tags":null,"title":"Hello World!","uri":"/posts/2017/hello-world/"},{"categories":null,"content":"17 December 2016 - GDG Venezia Tech Talks ","date":"17 Dec 2016","objectID":"/talks/2016/backup-restore-gdg/:0:0","tags":null,"title":"How To Deal with Backup \u0026 Restore on Android","uri":"/talks/2016/backup-restore-gdg/"},{"categories":null,"content":"Abstract: One of the worst things is to lose all your data when you change a phone or when you reset it. With this talk we’ll see how to deal with this problem and how to secure your application’s data. ","date":"17 Dec 2016","objectID":"/talks/2016/backup-restore-gdg/:1:0","tags":null,"title":"How To Deal with Backup \u0026 Restore on Android","uri":"/talks/2016/backup-restore-gdg/"},{"categories":null,"content":"Slide: ","date":"17 Dec 2016","objectID":"/talks/2016/backup-restore-gdg/:2:0","tags":null,"title":"How To Deal with Backup \u0026 Restore on Android","uri":"/talks/2016/backup-restore-gdg/"},{"categories":null,"content":"Video: ","date":"17 Dec 2016","objectID":"/talks/2016/backup-restore-gdg/:3:0","tags":null,"title":"How To Deal with Backup \u0026 Restore on Android","uri":"/talks/2016/backup-restore-gdg/"},{"categories":null,"content":" Marco Gomiero I’m a software engineer, currently working at TIER as Senior Android Engineer. I’m a Google Developer Expert for Kotlin, I love Kotlin and I have experience with native Android and native iOS development, as well as cross-platform development with Flutter and Kotlin Multiplatform. In my spare time, I write and maintain open source code, I share my dev experience by writing on my blog, speaking at confs and organizing events with the Google Developer Group Venezia and I play basketball. Work Experience ","date":"1 Jan 0001","objectID":"/about-me/:0:0","tags":null,"title":"About Me","uri":"/about-me/"},{"categories":null,"content":"TIER · Senior Android Engineer · August 2021 - Present TIER Mobility is Europe’s leading shared micro-mobility provider, with a mission to Change Mobility for Good. By providing people with a range of shared, light electric vehicles, from e-scooters to e-bikes and e-mopeds, powered by a proprietary Energy Network, TIER helps cities reduce their dependence on cars. Founded in 2018 by Lawrence Leuschner, Matthias Laug and Julian Blessin, TIER is headquartered in Berlin and currently operates in 95+ cities across 12 countries in Europe and the Middle East. With a focus on providing the safest, most equitable and most sustainable mobility solution, TIER has been climate neutral since 2020. ","date":"1 Jan 0001","objectID":"/about-me/:0:1","tags":null,"title":"About Me","uri":"/about-me/"},{"categories":null,"content":"Uniwhere · Tech Lead · September 2017 - May 2021 Uniwhere - Best University app in Italy, 600,000 registered students, backed by VCs and investors from Miami, Berlin, and Milan. Tech leadership of the whole infrastructure (BE, Client Android, Client iOS, DevOps), used monthly by more than 100K unique users Revelop - Email platform helping top performers make the most out of the personal inbox. Used in the best schools of the world — from Harvard to Columbia. Written from scratch the app backend with Ktor Design and developed the iOS app architecture with declarative patterns and Kotlin Multiplatform as data persistence layer Education ","date":"1 Jan 0001","objectID":"/about-me/:0:2","tags":null,"title":"About Me","uri":"/about-me/"},{"categories":null,"content":"Computer Engineering - Master Degree · University of Padua · 2016 - 2018 Thesis title: “Design and development of a system for linking university careers and real world jobs” ","date":"1 Jan 0001","objectID":"/about-me/:0:3","tags":null,"title":"About Me","uri":"/about-me/"},{"categories":null,"content":"Information Engineering - Bachelor Degree · University of Padua · 2012 - 2016 Thesis title: “Porting issues from Scratch/BYOB to Snap in a browser environment” ","date":"1 Jan 0001","objectID":"/about-me/:0:4","tags":null,"title":"About Me","uri":"/about-me/"},{"categories":null,"content":"For an always updated list of my projects, visit my Github profile. ","date":"1 Jan 0001","objectID":"/projects/:0:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"KMP FatFramework Cocoa · Gradle Plugin KMP FatFramework Cocoa is a Gradle plugin for Kotlin Multiplatform projects that generates a FatFramework for iOS targets, or a XCFramework for Apple targets and manages the publishing process in a CocoaPod Repository. The plugin is uploaded on MavenCentral. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:1:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Money Flow · Native Android and iOS App A money management Android and iOS app wrote with Kotlin Multiplatform, Jetpack Compose and Swift UI. This project is a work in progress, you can track the progress on GitHub ","date":"1 Jan 0001","objectID":"/projects/:2:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Filmatic · Native Android App Filmatic shows you some popular movies of the moment. The project is a playground application that I use to catch up with modern Android development. In particular, I’ve used it to learn modularization and Dependency Injection with Dagger and then Hilt. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:3:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"QR Reader Secure · Native Android App QR Reader Secure is a simple QR Reader designed and developed with a focus on privacy. I decided to develop it after a failed search for a simple and secure reader for my parents. The app is very simple (the aim is to scan a code and open the link, only this!) and it does not require sneaky, strange and useless permissions just for the sake of stealing your data. There aren’t ads, trackers of any sort and what do you scan remains on your phone. The only requested permission is for the camera. You can find QR Reader Secure on the Play Store and on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:4:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Friends Tournament · Flutter Android App A mobile application to manage and create tournaments. Friends Tournament will help to generate videogames tournament, sports tournament, board games tournament, whatever type of tournament. All you need to do is to provide the number of players, the number of matches, and the number of players that can play at the same time. That’s all! Friends Tournament will then generate the matches and the rounds for you. Then you can keep track of the players' score and a nice leaderboard is automatically generated. The application is written with Flutter and for the time being, it’s only available for Android. Maybe in the future, I will release the iOs version too. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:5:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"RSS Parser · Android Library An Android library to parse a RSS Feed. You can retrive the following information about an article: Title Author Description Content Main Image Link Publication Date The library is uploaded on MavenCentral. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:6:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"Youtube Parser · Android Library An Android library to get video’s information from Youtube channels. You can retrieve title, link and thumbnails of a video from a specific channel. For each video you can also get statistics like views, number of like, dislike, favorite and comments. The library is uploaded on MavenCentral. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:7:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@Deprecated - Zeromag · Website Graphic restyling and porting from a custom CMS to Wordpress of the Italian blog “ZeroMag”. The site was built with Wordpress and is no longer online. ","date":"1 Jan 0001","objectID":"/projects/:8:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@Deprecated Mario Discepolo · Android App Android Application to read latest articles and reviews from mariodiscepolo.com, watch latest Youtube video from MarioDiscepolo’s channel and receive notifications for the new articles ","date":"1 Jan 0001","objectID":"/projects/:9:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@Deprecated - Taxitaly and Tour · Website Website built with Wordpress to book transfer and touristic tours in the area of Venice. The site is no longer active ","date":"1 Jan 0001","objectID":"/projects/:10:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@Deprecated - Lupokkio · Android Android Application to read latest articles and reviews, watch latest Youtube video from Lupokkio’s channel and receive notifications for the new articles. The application is no longer active because the blog is dead but you can see its past behavior by watching this video. ","date":"1 Jan 0001","objectID":"/projects/:11:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@Deprecated - Lupokkio · Website Graphic restyling and maintenance of the Italian tech blog “Lupokkio”. The site was built with Wordpress and is no longer online. ","date":"1 Jan 0001","objectID":"/projects/:12:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@University - Distributed File System RMI · Java A distributed file system implemented in Java using RMI with replication, read/write lock and a GUI. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:13:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@University - Cyber Robot Brain · Android App This Android application has been developed during an University Class and the aim was to provide a “brain” to the Cyber Robot, a cheap sensorless toy robot sell by Clementoni. More information about the robot can be found on the official website. More specifically, the aim was to reverse-engineer the communication protocol of the robot via the Bluetooth HCI snoop log and then build an app that guides it to reach a target object that is framed by the phone’s camera. For more information about the communication protol, visit the Wiki Page. You can find more info about the project on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:14:0","tags":null,"title":"Projects","uri":"/projects/"},{"categories":null,"content":"@University - BANKS · Java A Java app with a GUI to perform keyword-based search in relational database. The app implements Banks, an algorithm for data and schema browsing together with keyword-based search. You can get information from a relational database by typing a few keywords. You can find more info about it on GitHub. ","date":"1 Jan 0001","objectID":"/projects/:15:0","tags":null,"title":"Projects","uri":"/projects/"}]